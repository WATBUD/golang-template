// Code generated by MockGen. DO NOT EDIT.
// Source: internal/centrifugo/centrifugo.go

// Package centrifugo is a generated GoMock package.
package centrifugo

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gocent "github.com/centrifugal/gocent/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockClient) Broadcast(ctx context.Context, channels []string, data []byte, opts ...gocent.PublishOption) (gocent.BroadcastResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channels, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Broadcast", varargs...)
	ret0, _ := ret[0].(gocent.BroadcastResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockClientMockRecorder) Broadcast(ctx, channels, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channels, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockClient)(nil).Broadcast), varargs...)
}

// Channels mocks base method.
func (m *MockClient) Channels(ctx context.Context, opts ...gocent.ChannelsOption) (gocent.ChannelsResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Channels", varargs...)
	ret0, _ := ret[0].(gocent.ChannelsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channels indicates an expected call of Channels.
func (mr *MockClientMockRecorder) Channels(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channels", reflect.TypeOf((*MockClient)(nil).Channels), varargs...)
}

// Disconnect mocks base method.
func (m *MockClient) Disconnect(ctx context.Context, user string, opts ...gocent.DisconnectOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Disconnect", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockClientMockRecorder) Disconnect(ctx, user interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockClient)(nil).Disconnect), varargs...)
}

// History mocks base method.
func (m *MockClient) History(ctx context.Context, channel string, opts ...gocent.HistoryOption) (gocent.HistoryResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channel}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "History", varargs...)
	ret0, _ := ret[0].(gocent.HistoryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockClientMockRecorder) History(ctx, channel interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channel}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockClient)(nil).History), varargs...)
}

// HistoryRemove mocks base method.
func (m *MockClient) HistoryRemove(ctx context.Context, channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryRemove", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// HistoryRemove indicates an expected call of HistoryRemove.
func (mr *MockClientMockRecorder) HistoryRemove(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryRemove", reflect.TypeOf((*MockClient)(nil).HistoryRemove), ctx, channel)
}

// Info mocks base method.
func (m *MockClient) Info(ctx context.Context) (gocent.InfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(gocent.InfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockClientMockRecorder) Info(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockClient)(nil).Info), ctx)
}

// Pipe mocks base method.
func (m *MockClient) Pipe() *gocent.Pipe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipe")
	ret0, _ := ret[0].(*gocent.Pipe)
	return ret0
}

// Pipe indicates an expected call of Pipe.
func (mr *MockClientMockRecorder) Pipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockClient)(nil).Pipe))
}

// Presence mocks base method.
func (m *MockClient) Presence(ctx context.Context, channel string) (gocent.PresenceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Presence", ctx, channel)
	ret0, _ := ret[0].(gocent.PresenceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Presence indicates an expected call of Presence.
func (mr *MockClientMockRecorder) Presence(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Presence", reflect.TypeOf((*MockClient)(nil).Presence), ctx, channel)
}

// PresenceStats mocks base method.
func (m *MockClient) PresenceStats(ctx context.Context, channel string) (gocent.PresenceStatsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresenceStats", ctx, channel)
	ret0, _ := ret[0].(gocent.PresenceStatsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresenceStats indicates an expected call of PresenceStats.
func (mr *MockClientMockRecorder) PresenceStats(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresenceStats", reflect.TypeOf((*MockClient)(nil).PresenceStats), ctx, channel)
}

// Publish mocks base method.
func (m *MockClient) Publish(ctx context.Context, channel string, data []byte, opts ...gocent.PublishOption) (gocent.PublishResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channel, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(gocent.PublishResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockClientMockRecorder) Publish(ctx, channel, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channel, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), varargs...)
}

// SendPipe mocks base method.
func (m *MockClient) SendPipe(ctx context.Context, pipe *gocent.Pipe) ([]gocent.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPipe", ctx, pipe)
	ret0, _ := ret[0].([]gocent.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPipe indicates an expected call of SendPipe.
func (mr *MockClientMockRecorder) SendPipe(ctx, pipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPipe", reflect.TypeOf((*MockClient)(nil).SendPipe), ctx, pipe)
}

// SetHTTPClient mocks base method.
func (m *MockClient) SetHTTPClient(httpClient *http.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHTTPClient", httpClient)
}

// SetHTTPClient indicates an expected call of SetHTTPClient.
func (mr *MockClientMockRecorder) SetHTTPClient(httpClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTTPClient", reflect.TypeOf((*MockClient)(nil).SetHTTPClient), httpClient)
}

// Subscribe mocks base method.
func (m *MockClient) Subscribe(ctx context.Context, channel, user string, opts ...gocent.SubscribeOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channel, user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockClientMockRecorder) Subscribe(ctx, channel, user interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channel, user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockClient)(nil).Subscribe), varargs...)
}

// Unsubscribe mocks base method.
func (m *MockClient) Unsubscribe(ctx context.Context, channel, user string, opts ...gocent.UnsubscribeOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, channel, user}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockClientMockRecorder) Unsubscribe(ctx, channel, user interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, channel, user}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockClient)(nil).Unsubscribe), varargs...)
}
