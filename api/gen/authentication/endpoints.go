// Code generated by goa v3.16.2, DO NOT EDIT.
//
// authentication endpoints
//
// Command:
// $ goa gen mai.today/api/design

package authentication

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "authentication" service endpoints.
type Endpoints struct {
	SignIn goa.Endpoint
}

// NewEndpoints wraps the methods of the "authentication" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SignIn: NewSignInEndpoint(s),
	}
}

// Use applies the given middleware to all the "authentication" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SignIn = m(e.SignIn)
}

// NewSignInEndpoint returns an endpoint function that calls the method
// "SignIn" of service "authentication".
func NewSignInEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SignInPayload)
		return nil, s.SignIn(ctx, p)
	}
}
