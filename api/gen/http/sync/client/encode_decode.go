// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Sync HTTP client encoders and decoders
//
// Command:
// $ goa gen mai.today/api/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
	sync "mai.today/api/gen/sync"
)

// BuildReceiveSyncRequest instantiates a HTTP request object with method and
// path set to call the "Sync" service "receiveSync" endpoint
func (c *Client) BuildReceiveSyncRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		channel string
	)
	{
		p, ok := v.(*sync.ReceiveSyncPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Sync", "receiveSync", "*sync.ReceiveSyncPayload", v)
		}
		channel = p.Channel
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReceiveSyncSyncPath(channel)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Sync", "receiveSync", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReceiveSyncRequest returns an encoder for requests sent to the Sync
// receiveSync server.
func EncodeReceiveSyncRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sync.ReceiveSyncPayload)
		if !ok {
			return goahttp.ErrInvalidType("Sync", "receiveSync", "*sync.ReceiveSyncPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeReceiveSyncResponse returns a decoder for responses returned by the
// Sync receiveSync endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeReceiveSyncResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusSwitchingProtocols:
			res := NewReceiveSyncSyncResultSwitchingProtocols()
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Sync", "receiveSync", resp.StatusCode, string(body))
		}
	}
}

// BuildSyncRequest instantiates a HTTP request object with method and path set
// to call the "Sync" service "sync" endpoint
func (c *Client) BuildSyncRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SyncSyncPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Sync", "sync", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSyncRequest returns an encoder for requests sent to the Sync sync
// server.
func EncodeSyncRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sync.SyncPayload)
		if !ok {
			return goahttp.ErrInvalidType("Sync", "sync", "*sync.SyncPayload", v)
		}
		if p.JWT != nil {
			head := *p.JWT
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewSyncRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Sync", "sync", err)
		}
		return nil
	}
}

// DecodeSyncResponse returns a decoder for responses returned by the Sync sync
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeSyncResponse may return the following errors:
//   - "invalid token" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeSyncResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SyncOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Sync", "sync", err)
			}
			err = ValidateSyncOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Sync", "sync", err)
			}
			res := NewSyncResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SyncInvalidTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Sync", "sync", err)
			}
			err = ValidateSyncInvalidTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Sync", "sync", err)
			}
			return nil, NewSyncInvalidToken(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Sync", "sync", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCommandResponseBodyToSyncCommand builds a value of type
// *sync.Command from a value of type *CommandResponseBody.
func unmarshalCommandResponseBodyToSyncCommand(v *CommandResponseBody) *sync.Command {
	res := &sync.Command{
		Type: *v.Type,
	}

	return res
}

// unmarshalSyncPayloadDataResponseBodyToSyncSyncPayloadData builds a value of
// type *sync.SyncPayloadData from a value of type *SyncPayloadDataResponseBody.
func unmarshalSyncPayloadDataResponseBodyToSyncSyncPayloadData(v *SyncPayloadDataResponseBody) *sync.SyncPayloadData {
	res := &sync.SyncPayloadData{}
	if v.BaseInfos != nil {
		res.BaseInfos = make([]*sync.BaseInfo, len(v.BaseInfos))
		for i, val := range v.BaseInfos {
			res.BaseInfos[i] = unmarshalBaseInfoResponseBodyToSyncBaseInfo(val)
		}
	}
	if v.BaseNavStates != nil {
		res.BaseNavStates = make([]*sync.BaseNavState, len(v.BaseNavStates))
		for i, val := range v.BaseNavStates {
			res.BaseNavStates[i] = unmarshalBaseNavStateResponseBodyToSyncBaseNavState(val)
		}
	}

	return res
}

// unmarshalBaseInfoResponseBodyToSyncBaseInfo builds a value of type
// *sync.BaseInfo from a value of type *BaseInfoResponseBody.
func unmarshalBaseInfoResponseBodyToSyncBaseInfo(v *BaseInfoResponseBody) *sync.BaseInfo {
	if v == nil {
		return nil
	}
	res := &sync.BaseInfo{
		ID:        *v.ID,
		BaseID:    *v.BaseID,
		Color:     *v.Color,
		Logo:      *v.Logo,
		Name:      *v.Name,
		DeletedAt: v.DeletedAt,
	}

	return res
}

// unmarshalBaseNavStateResponseBodyToSyncBaseNavState builds a value of type
// *sync.BaseNavState from a value of type *BaseNavStateResponseBody.
func unmarshalBaseNavStateResponseBodyToSyncBaseNavState(v *BaseNavStateResponseBody) *sync.BaseNavState {
	if v == nil {
		return nil
	}
	res := &sync.BaseNavState{
		ID:        *v.ID,
		BaseID:    *v.BaseID,
		Index:     *v.Index,
		DeletedAt: v.DeletedAt,
	}

	return res
}
