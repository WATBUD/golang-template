// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Sync HTTP client CLI support package
//
// Command:
// $ goa gen mai.today/api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	sync "mai.today/api/gen/sync"
)

// BuildReceiveSyncPayload builds the payload for the Sync receiveSync endpoint
// from CLI flags.
func BuildReceiveSyncPayload(syncReceiveSyncChannel string, syncReceiveSyncJWT string) (*sync.ReceiveSyncPayload, error) {
	var err error
	var channel string
	{
		channel = syncReceiveSyncChannel
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if syncReceiveSyncJWT != "" {
			jwt = &syncReceiveSyncJWT
		}
	}
	v := &sync.ReceiveSyncPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v, nil
}

// BuildSyncPayload builds the payload for the Sync sync endpoint from CLI
// flags.
func BuildSyncPayload(syncSyncBody string, syncSyncJWT string) (*sync.SyncPayload, error) {
	var err error
	var body SyncRequestBody
	{
		err = json.Unmarshal([]byte(syncSyncBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"lastTimestamp\": 1719188007000000000\n   }'")
		}
	}
	var jwt *string
	{
		if syncSyncJWT != "" {
			jwt = &syncSyncJWT
		}
	}
	v := &sync.SyncPayload{
		LastTimestamp: body.LastTimestamp,
	}
	v.JWT = jwt

	return v, nil
}
