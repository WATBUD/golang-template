// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Sync HTTP server types
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	goa "goa.design/goa/v3/pkg"
	sync "mai.today/api/gen/sync"
)

// SyncRequestBody is the type of the "Sync" service "sync" endpoint HTTP
// request body.
type SyncRequestBody struct {
	// 上次同步的時間戳記
	LastTimestamp *int64 `form:"lastTimestamp,omitempty" json:"lastTimestamp,omitempty" xml:"lastTimestamp,omitempty"`
}

// SyncOKResponseBody is the type of the "Sync" service "sync" endpoint HTTP
// response body.
type SyncOKResponseBody struct {
	Command *CommandResponseBody `form:"command" json:"command" xml:"command"`
	// 時間戳記
	Timestamp int64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// 資料
	Data *SyncPayloadDataResponseBody `form:"data" json:"data" xml:"data"`
}

// SyncInvalidTokenResponseBody is the type of the "Sync" service "sync"
// endpoint HTTP response body for the "invalid token" error.
type SyncInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CommandResponseBody is used to define fields on response body types.
type CommandResponseBody struct {
	// 類型
	Type string `form:"type" json:"type" xml:"type"`
}

// SyncPayloadDataResponseBody is used to define fields on response body types.
type SyncPayloadDataResponseBody struct {
	BaseInfos     []*BaseInfoResponseBody     `form:"baseInfos,omitempty" json:"baseInfos,omitempty" xml:"baseInfos,omitempty"`
	BaseNavStates []*BaseNavStateResponseBody `form:"baseNavStates,omitempty" json:"baseNavStates,omitempty" xml:"baseNavStates,omitempty"`
}

// BaseInfoResponseBody is used to define fields on response body types.
type BaseInfoResponseBody struct {
	// 識別碼
	ID string `form:"id" json:"id" xml:"id"`
	// 基地識別碼
	BaseID string `form:"baseId" json:"baseId" xml:"baseId"`
	// 主題颜色
	Color string `form:"color" json:"color" xml:"color"`
	// 標識圖片的 URL
	Logo string `form:"logo" json:"logo" xml:"logo"`
	// 名稱
	Name string `form:"name" json:"name" xml:"name"`
	// 刪除時間
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// BaseNavStateResponseBody is used to define fields on response body types.
type BaseNavStateResponseBody struct {
	// 識別碼
	ID string `form:"id" json:"id" xml:"id"`
	// 基地識別碼
	BaseID string `form:"baseId" json:"baseId" xml:"baseId"`
	// 順序
	Index int `form:"index" json:"index" xml:"index"`
	// 刪除時間
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// NewSyncOKResponseBody builds the HTTP response body from the result of the
// "sync" endpoint of the "Sync" service.
func NewSyncOKResponseBody(res *sync.SyncResult) *SyncOKResponseBody {
	body := &SyncOKResponseBody{
		Timestamp: res.Timestamp,
	}
	if res.Command != nil {
		body.Command = marshalSyncCommandToCommandResponseBody(res.Command)
	}
	if res.Data != nil {
		body.Data = marshalSyncSyncPayloadDataToSyncPayloadDataResponseBody(res.Data)
	}
	return body
}

// NewSyncInvalidTokenResponseBody builds the HTTP response body from the
// result of the "sync" endpoint of the "Sync" service.
func NewSyncInvalidTokenResponseBody(res *goa.ServiceError) *SyncInvalidTokenResponseBody {
	body := &SyncInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReceiveSyncPayload builds a Sync service receiveSync endpoint payload.
func NewReceiveSyncPayload(channel string, jwt *string) *sync.ReceiveSyncPayload {
	v := &sync.ReceiveSyncPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v
}

// NewSyncPayload builds a Sync service sync endpoint payload.
func NewSyncPayload(body *SyncRequestBody, jwt *string) *sync.SyncPayload {
	v := &sync.SyncPayload{
		LastTimestamp: body.LastTimestamp,
	}
	v.JWT = jwt

	return v
}

// ValidateSyncRequestBody runs the validations defined on SyncRequestBody
func ValidateSyncRequestBody(body *SyncRequestBody) (err error) {
	if body.LastTimestamp != nil {
		if *body.LastTimestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.lastTimestamp", *body.LastTimestamp, 1.719188007e+18, true))
		}
	}
	return
}
