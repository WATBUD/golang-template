// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Sync HTTP server encoders and decoders
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	sync "mai.today/api/gen/sync"
)

// EncodeReceiveSyncResponse returns an encoder for responses returned by the
// Sync receiveSync endpoint.
func EncodeReceiveSyncResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveSyncRequest returns a decoder for requests sent to the Sync
// receiveSync endpoint.
func DecodeReceiveSyncRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveSyncPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeSyncResponse returns an encoder for responses returned by the Sync
// sync endpoint.
func EncodeSyncResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*sync.SyncResult)
		enc := encoder(ctx, w)
		body := NewSyncOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSyncRequest returns a decoder for requests sent to the Sync sync
// endpoint.
func DecodeSyncRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body SyncRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSyncRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewSyncPayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeSyncError returns an encoder for errors returned by the sync Sync
// endpoint.
func EncodeSyncError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewSyncInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSyncCommandToCommandResponseBody builds a value of type
// *CommandResponseBody from a value of type *sync.Command.
func marshalSyncCommandToCommandResponseBody(v *sync.Command) *CommandResponseBody {
	res := &CommandResponseBody{
		Type: v.Type,
	}

	return res
}

// marshalSyncSyncPayloadDataToSyncPayloadDataResponseBody builds a value of
// type *SyncPayloadDataResponseBody from a value of type *sync.SyncPayloadData.
func marshalSyncSyncPayloadDataToSyncPayloadDataResponseBody(v *sync.SyncPayloadData) *SyncPayloadDataResponseBody {
	res := &SyncPayloadDataResponseBody{}
	if v.BaseInfos != nil {
		res.BaseInfos = make([]*BaseInfoResponseBody, len(v.BaseInfos))
		for i, val := range v.BaseInfos {
			res.BaseInfos[i] = marshalSyncBaseInfoToBaseInfoResponseBody(val)
		}
	}
	if v.BaseNavStates != nil {
		res.BaseNavStates = make([]*BaseNavStateResponseBody, len(v.BaseNavStates))
		for i, val := range v.BaseNavStates {
			res.BaseNavStates[i] = marshalSyncBaseNavStateToBaseNavStateResponseBody(val)
		}
	}

	return res
}

// marshalSyncBaseInfoToBaseInfoResponseBody builds a value of type
// *BaseInfoResponseBody from a value of type *sync.BaseInfo.
func marshalSyncBaseInfoToBaseInfoResponseBody(v *sync.BaseInfo) *BaseInfoResponseBody {
	if v == nil {
		return nil
	}
	res := &BaseInfoResponseBody{
		ID:        v.ID,
		BaseID:    v.BaseID,
		Color:     v.Color,
		Logo:      v.Logo,
		Name:      v.Name,
		DeletedAt: v.DeletedAt,
	}

	return res
}

// marshalSyncBaseNavStateToBaseNavStateResponseBody builds a value of type
// *BaseNavStateResponseBody from a value of type *sync.BaseNavState.
func marshalSyncBaseNavStateToBaseNavStateResponseBody(v *sync.BaseNavState) *BaseNavStateResponseBody {
	if v == nil {
		return nil
	}
	res := &BaseNavStateResponseBody{
		ID:        v.ID,
		BaseID:    v.BaseID,
		Index:     v.Index,
		DeletedAt: v.DeletedAt,
	}

	return res
}
