// Code generated by goa v3.16.2, DO NOT EDIT.
//
// folder HTTP server encoders and decoders
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	folder "mai.today/api/gen/folder"
)

// EncodeReceiveCreateFolderResponse returns an encoder for responses returned
// by the folder receiveCreateFolder endpoint.
func EncodeReceiveCreateFolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveCreateFolderRequest returns a decoder for requests sent to the
// folder receiveCreateFolder endpoint.
func DecodeReceiveCreateFolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveCreateFolderPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateFolderResponse returns an encoder for responses returned by the
// folder CreateFolder endpoint.
func EncodeCreateFolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*folder.CreateFolderResult)
		enc := encoder(ctx, w)
		body := NewCreateFolderOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateFolderRequest returns a decoder for requests sent to the folder
// CreateFolder endpoint.
func DecodeCreateFolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateFolderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateFolderRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewCreateFolderPayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateFolderError returns an encoder for errors returned by the
// CreateFolder folder endpoint.
func EncodeCreateFolderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateFolderInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReceiveDeleteFolderResponse returns an encoder for responses returned
// by the folder receiveDeleteFolder endpoint.
func EncodeReceiveDeleteFolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveDeleteFolderRequest returns a decoder for requests sent to the
// folder receiveDeleteFolder endpoint.
func DecodeReceiveDeleteFolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveDeleteFolderPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteFolderResponse returns an encoder for responses returned by the
// folder DeleteFolder endpoint.
func EncodeDeleteFolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*folder.DeleteFolderResult)
		enc := encoder(ctx, w)
		body := NewDeleteFolderOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteFolderRequest returns a decoder for requests sent to the folder
// DeleteFolder endpoint.
func DecodeDeleteFolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			folderID string
			jwt      *string

			params = mux.Vars(r)
		)
		folderID = params["folderId"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewDeleteFolderPayload(folderID, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteFolderError returns an encoder for errors returned by the
// DeleteFolder folder endpoint.
func EncodeDeleteFolderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteFolderInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReceiveUpdateFolderResponse returns an encoder for responses returned
// by the folder receiveUpdateFolder endpoint.
func EncodeReceiveUpdateFolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveUpdateFolderRequest returns a decoder for requests sent to the
// folder receiveUpdateFolder endpoint.
func DecodeReceiveUpdateFolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveUpdateFolderPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateFolderResponse returns an encoder for responses returned by the
// folder UpdateFolder endpoint.
func EncodeUpdateFolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*folder.UpdateFolderResult)
		enc := encoder(ctx, w)
		body := NewUpdateFolderOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateFolderRequest returns a decoder for requests sent to the folder
// UpdateFolder endpoint.
func DecodeUpdateFolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateFolderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateFolderRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			folderID string
			jwt      *string

			params = mux.Vars(r)
		)
		folderID = params["folderId"]
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewUpdateFolderPayload(&body, folderID, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateFolderError returns an encoder for errors returned by the
// UpdateFolder folder endpoint.
func EncodeUpdateFolderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateFolderInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReceiveListFoldersResponse returns an encoder for responses returned
// by the folder receiveListFolders endpoint.
func EncodeReceiveListFoldersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveListFoldersRequest returns a decoder for requests sent to the
// folder receiveListFolders endpoint.
func DecodeReceiveListFoldersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveListFoldersPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListFoldersResponse returns an encoder for responses returned by the
// folder ListFolders endpoint.
func EncodeListFoldersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*folder.ListFoldersResult)
		enc := encoder(ctx, w)
		body := NewListFoldersOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFoldersRequest returns a decoder for requests sent to the folder
// ListFolders endpoint.
func DecodeListFoldersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewListFoldersPayload(jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListFoldersError returns an encoder for errors returned by the
// ListFolders folder endpoint.
func EncodeListFoldersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListFoldersInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalFolderRequestBodyToFolderFolder builds a value of type
// *folder.Folder from a value of type *FolderRequestBody.
func unmarshalFolderRequestBodyToFolderFolder(v *FolderRequestBody) *folder.Folder {
	res := &folder.Folder{
		FolderID:  *v.FolderID,
		BaseID:    *v.BaseID,
		ParentID:  *v.ParentID,
		Position:  v.Position,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
		Type:      *v.Type,
	}
	res.Data = unmarshalFolderDataRequestBodyToFolderFolderData(v.Data)

	return res
}

// unmarshalFolderDataRequestBodyToFolderFolderData builds a value of type
// *folder.FolderData from a value of type *FolderDataRequestBody.
func unmarshalFolderDataRequestBodyToFolderFolderData(v *FolderDataRequestBody) *folder.FolderData {
	res := &folder.FolderData{
		Color: *v.Color,
		Name:  *v.Name,
	}

	return res
}

// marshalFolderCommandToCommandResponseBody builds a value of type
// *CommandResponseBody from a value of type *folder.Command.
func marshalFolderCommandToCommandResponseBody(v *folder.Command) *CommandResponseBody {
	res := &CommandResponseBody{
		Type: v.Type,
	}

	return res
}

// marshalFolderCreatefolderresultdataToCreatefolderresultdataResponseBody
// builds a value of type *CreatefolderresultdataResponseBody from a value of
// type *folder.Createfolderresultdata.
func marshalFolderCreatefolderresultdataToCreatefolderresultdataResponseBody(v *folder.Createfolderresultdata) *CreatefolderresultdataResponseBody {
	res := &CreatefolderresultdataResponseBody{
		FolderID:  v.FolderID,
		BaseID:    v.BaseID,
		ParentID:  v.ParentID,
		Position:  v.Position,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Type:      v.Type,
	}
	if v.Data != nil {
		res.Data = marshalFolderFolderDataToFolderDataResponseBody(v.Data)
	}

	return res
}

// marshalFolderFolderDataToFolderDataResponseBody builds a value of type
// *FolderDataResponseBody from a value of type *folder.FolderData.
func marshalFolderFolderDataToFolderDataResponseBody(v *folder.FolderData) *FolderDataResponseBody {
	res := &FolderDataResponseBody{
		Color: v.Color,
		Name:  v.Name,
	}

	return res
}
