// Code generated by goa v3.16.2, DO NOT EDIT.
//
// folder HTTP server
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
	folder "mai.today/api/gen/folder"
)

// Server lists the folder service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	ReceiveCreateFolder http.Handler
	CreateFolder        http.Handler
	ReceiveDeleteFolder http.Handler
	DeleteFolder        http.Handler
	ReceiveUpdateFolder http.Handler
	UpdateFolder        http.Handler
	ReceiveListFolders  http.Handler
	ListFolders         http.Handler
	CORS                http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the folder service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *folder.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ReceiveCreateFolder", "GET", "/{channel}/createFolder"},
			{"CreateFolder", "POST", "/folders"},
			{"ReceiveDeleteFolder", "GET", "/{channel}/deleteFolder"},
			{"DeleteFolder", "DELETE", "/folders/{folderId}"},
			{"ReceiveUpdateFolder", "GET", "/{channel}/updateFolder"},
			{"UpdateFolder", "PUT", "/folders/{folderId}"},
			{"ReceiveListFolders", "GET", "/{channel}/listFolders"},
			{"ListFolders", "GET", "/folders"},
			{"CORS", "OPTIONS", "/{channel}/createFolder"},
			{"CORS", "OPTIONS", "/folders"},
			{"CORS", "OPTIONS", "/{channel}/deleteFolder"},
			{"CORS", "OPTIONS", "/folders/{folderId}"},
			{"CORS", "OPTIONS", "/{channel}/updateFolder"},
			{"CORS", "OPTIONS", "/{channel}/listFolders"},
		},
		ReceiveCreateFolder: NewReceiveCreateFolderHandler(e.ReceiveCreateFolder, mux, decoder, encoder, errhandler, formatter),
		CreateFolder:        NewCreateFolderHandler(e.CreateFolder, mux, decoder, encoder, errhandler, formatter),
		ReceiveDeleteFolder: NewReceiveDeleteFolderHandler(e.ReceiveDeleteFolder, mux, decoder, encoder, errhandler, formatter),
		DeleteFolder:        NewDeleteFolderHandler(e.DeleteFolder, mux, decoder, encoder, errhandler, formatter),
		ReceiveUpdateFolder: NewReceiveUpdateFolderHandler(e.ReceiveUpdateFolder, mux, decoder, encoder, errhandler, formatter),
		UpdateFolder:        NewUpdateFolderHandler(e.UpdateFolder, mux, decoder, encoder, errhandler, formatter),
		ReceiveListFolders:  NewReceiveListFoldersHandler(e.ReceiveListFolders, mux, decoder, encoder, errhandler, formatter),
		ListFolders:         NewListFoldersHandler(e.ListFolders, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "folder" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ReceiveCreateFolder = m(s.ReceiveCreateFolder)
	s.CreateFolder = m(s.CreateFolder)
	s.ReceiveDeleteFolder = m(s.ReceiveDeleteFolder)
	s.DeleteFolder = m(s.DeleteFolder)
	s.ReceiveUpdateFolder = m(s.ReceiveUpdateFolder)
	s.UpdateFolder = m(s.UpdateFolder)
	s.ReceiveListFolders = m(s.ReceiveListFolders)
	s.ListFolders = m(s.ListFolders)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return folder.MethodNames[:] }

// Mount configures the mux to serve the folder endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountReceiveCreateFolderHandler(mux, h.ReceiveCreateFolder)
	MountCreateFolderHandler(mux, h.CreateFolder)
	MountReceiveDeleteFolderHandler(mux, h.ReceiveDeleteFolder)
	MountDeleteFolderHandler(mux, h.DeleteFolder)
	MountReceiveUpdateFolderHandler(mux, h.ReceiveUpdateFolder)
	MountUpdateFolderHandler(mux, h.UpdateFolder)
	MountReceiveListFoldersHandler(mux, h.ReceiveListFolders)
	MountListFoldersHandler(mux, h.ListFolders)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the folder endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountReceiveCreateFolderHandler configures the mux to serve the "folder"
// service "receiveCreateFolder" endpoint.
func MountReceiveCreateFolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/createFolder", f)
}

// NewReceiveCreateFolderHandler creates a HTTP handler which loads the HTTP
// request and calls the "folder" service "receiveCreateFolder" endpoint.
func NewReceiveCreateFolderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveCreateFolderRequest(mux, decoder)
		encodeResponse = EncodeReceiveCreateFolderResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveCreateFolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateFolderHandler configures the mux to serve the "folder" service
// "CreateFolder" endpoint.
func MountCreateFolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/folders", f)
}

// NewCreateFolderHandler creates a HTTP handler which loads the HTTP request
// and calls the "folder" service "CreateFolder" endpoint.
func NewCreateFolderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateFolderRequest(mux, decoder)
		encodeResponse = EncodeCreateFolderResponse(encoder)
		encodeError    = EncodeCreateFolderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateFolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReceiveDeleteFolderHandler configures the mux to serve the "folder"
// service "receiveDeleteFolder" endpoint.
func MountReceiveDeleteFolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/deleteFolder", f)
}

// NewReceiveDeleteFolderHandler creates a HTTP handler which loads the HTTP
// request and calls the "folder" service "receiveDeleteFolder" endpoint.
func NewReceiveDeleteFolderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveDeleteFolderRequest(mux, decoder)
		encodeResponse = EncodeReceiveDeleteFolderResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveDeleteFolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteFolderHandler configures the mux to serve the "folder" service
// "DeleteFolder" endpoint.
func MountDeleteFolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/folders/{folderId}", f)
}

// NewDeleteFolderHandler creates a HTTP handler which loads the HTTP request
// and calls the "folder" service "DeleteFolder" endpoint.
func NewDeleteFolderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteFolderRequest(mux, decoder)
		encodeResponse = EncodeDeleteFolderResponse(encoder)
		encodeError    = EncodeDeleteFolderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteFolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReceiveUpdateFolderHandler configures the mux to serve the "folder"
// service "receiveUpdateFolder" endpoint.
func MountReceiveUpdateFolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/updateFolder", f)
}

// NewReceiveUpdateFolderHandler creates a HTTP handler which loads the HTTP
// request and calls the "folder" service "receiveUpdateFolder" endpoint.
func NewReceiveUpdateFolderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveUpdateFolderRequest(mux, decoder)
		encodeResponse = EncodeReceiveUpdateFolderResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveUpdateFolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateFolderHandler configures the mux to serve the "folder" service
// "UpdateFolder" endpoint.
func MountUpdateFolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/folders/{folderId}", f)
}

// NewUpdateFolderHandler creates a HTTP handler which loads the HTTP request
// and calls the "folder" service "UpdateFolder" endpoint.
func NewUpdateFolderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateFolderRequest(mux, decoder)
		encodeResponse = EncodeUpdateFolderResponse(encoder)
		encodeError    = EncodeUpdateFolderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateFolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReceiveListFoldersHandler configures the mux to serve the "folder"
// service "receiveListFolders" endpoint.
func MountReceiveListFoldersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/listFolders", f)
}

// NewReceiveListFoldersHandler creates a HTTP handler which loads the HTTP
// request and calls the "folder" service "receiveListFolders" endpoint.
func NewReceiveListFoldersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveListFoldersRequest(mux, decoder)
		encodeResponse = EncodeReceiveListFoldersResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveListFolders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListFoldersHandler configures the mux to serve the "folder" service
// "ListFolders" endpoint.
func MountListFoldersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleFolderOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/folders", f)
}

// NewListFoldersHandler creates a HTTP handler which loads the HTTP request
// and calls the "folder" service "ListFolders" endpoint.
func NewListFoldersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListFoldersRequest(mux, decoder)
		encodeResponse = EncodeListFoldersResponse(encoder)
		encodeError    = EncodeListFoldersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ListFolders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "folder")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service folder.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleFolderOrigin(h)
	mux.Handle("OPTIONS", "/{channel}/createFolder", h.ServeHTTP)
	mux.Handle("OPTIONS", "/folders", h.ServeHTTP)
	mux.Handle("OPTIONS", "/{channel}/deleteFolder", h.ServeHTTP)
	mux.Handle("OPTIONS", "/folders/{folderId}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/{channel}/updateFolder", h.ServeHTTP)
	mux.Handle("OPTIONS", "/{channel}/listFolders", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleFolderOrigin applies the CORS response headers corresponding to the
// origin for the service folder.
func HandleFolderOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, PATCH, DELETE, CONNECT, OPTIONS, TRACE")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
