// Code generated by goa v3.16.2, DO NOT EDIT.
//
// folder HTTP client CLI support package
//
// Command:
// $ goa gen mai.today/api/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	folder "mai.today/api/gen/folder"
)

// BuildReceiveCreateFolderPayload builds the payload for the folder
// receiveCreateFolder endpoint from CLI flags.
func BuildReceiveCreateFolderPayload(folderReceiveCreateFolderChannel string, folderReceiveCreateFolderJWT string) (*folder.ReceiveCreateFolderPayload, error) {
	var err error
	var channel string
	{
		channel = folderReceiveCreateFolderChannel
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if folderReceiveCreateFolderJWT != "" {
			jwt = &folderReceiveCreateFolderJWT
		}
	}
	v := &folder.ReceiveCreateFolderPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v, nil
}

// BuildCreateFolderPayload builds the payload for the folder CreateFolder
// endpoint from CLI flags.
func BuildCreateFolderPayload(folderCreateFolderBody string, folderCreateFolderJWT string) (*folder.CreateFolderPayload, error) {
	var err error
	var body CreateFolderRequestBody
	{
		err = json.Unmarshal([]byte(folderCreateFolderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"folder\": {\n         \"baseId\": \"base123\",\n         \"createdAt\": \"2024-01-01T00:00:00Z\",\n         \"data\": {\n            \"color\": \"red\",\n            \"name\": \"My Folder\"\n         },\n         \"folderId\": \"123456\",\n         \"parentId\": \"parent123\",\n         \"position\": 1,\n         \"type\": \"type123\",\n         \"updatedAt\": \"2024-01-02T00:00:00Z\"\n      }\n   }'")
		}
		if body.Folder == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("folder", "body"))
		}
		if body.Folder != nil {
			if err2 := ValidateFolderRequestBody(body.Folder); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if folderCreateFolderJWT != "" {
			jwt = &folderCreateFolderJWT
		}
	}
	v := &folder.CreateFolderPayload{}
	if body.Folder != nil {
		v.Folder = marshalFolderRequestBodyToFolderFolder(body.Folder)
	}
	v.JWT = jwt

	return v, nil
}

// BuildReceiveDeleteFolderPayload builds the payload for the folder
// receiveDeleteFolder endpoint from CLI flags.
func BuildReceiveDeleteFolderPayload(folderReceiveDeleteFolderChannel string, folderReceiveDeleteFolderJWT string) (*folder.ReceiveDeleteFolderPayload, error) {
	var err error
	var channel string
	{
		channel = folderReceiveDeleteFolderChannel
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if folderReceiveDeleteFolderJWT != "" {
			jwt = &folderReceiveDeleteFolderJWT
		}
	}
	v := &folder.ReceiveDeleteFolderPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v, nil
}

// BuildDeleteFolderPayload builds the payload for the folder DeleteFolder
// endpoint from CLI flags.
func BuildDeleteFolderPayload(folderDeleteFolderFolderID string, folderDeleteFolderJWT string) (*folder.DeleteFolderPayload, error) {
	var folderID string
	{
		folderID = folderDeleteFolderFolderID
	}
	var jwt *string
	{
		if folderDeleteFolderJWT != "" {
			jwt = &folderDeleteFolderJWT
		}
	}
	v := &folder.DeleteFolderPayload{}
	v.FolderID = folderID
	v.JWT = jwt

	return v, nil
}

// BuildReceiveUpdateFolderPayload builds the payload for the folder
// receiveUpdateFolder endpoint from CLI flags.
func BuildReceiveUpdateFolderPayload(folderReceiveUpdateFolderChannel string, folderReceiveUpdateFolderJWT string) (*folder.ReceiveUpdateFolderPayload, error) {
	var err error
	var channel string
	{
		channel = folderReceiveUpdateFolderChannel
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if folderReceiveUpdateFolderJWT != "" {
			jwt = &folderReceiveUpdateFolderJWT
		}
	}
	v := &folder.ReceiveUpdateFolderPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v, nil
}

// BuildUpdateFolderPayload builds the payload for the folder UpdateFolder
// endpoint from CLI flags.
func BuildUpdateFolderPayload(folderUpdateFolderBody string, folderUpdateFolderFolderID string, folderUpdateFolderJWT string) (*folder.UpdateFolderPayload, error) {
	var err error
	var body UpdateFolderRequestBody
	{
		err = json.Unmarshal([]byte(folderUpdateFolderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"folder\": {\n         \"baseId\": \"base123\",\n         \"createdAt\": \"2024-01-01T00:00:00Z\",\n         \"data\": {\n            \"color\": \"red\",\n            \"name\": \"My Folder\"\n         },\n         \"folderId\": \"123456\",\n         \"parentId\": \"parent123\",\n         \"position\": 1,\n         \"type\": \"type123\",\n         \"updatedAt\": \"2024-01-02T00:00:00Z\"\n      }\n   }'")
		}
		if body.Folder == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("folder", "body"))
		}
		if body.Folder != nil {
			if err2 := ValidateFolderRequestBody(body.Folder); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var folderID string
	{
		folderID = folderUpdateFolderFolderID
	}
	var jwt *string
	{
		if folderUpdateFolderJWT != "" {
			jwt = &folderUpdateFolderJWT
		}
	}
	v := &folder.UpdateFolderPayload{}
	if body.Folder != nil {
		v.Folder = marshalFolderRequestBodyToFolderFolder(body.Folder)
	}
	v.FolderID = folderID
	v.JWT = jwt

	return v, nil
}

// BuildReceiveListFoldersPayload builds the payload for the folder
// receiveListFolders endpoint from CLI flags.
func BuildReceiveListFoldersPayload(folderReceiveListFoldersChannel string, folderReceiveListFoldersJWT string) (*folder.ReceiveListFoldersPayload, error) {
	var err error
	var channel string
	{
		channel = folderReceiveListFoldersChannel
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var jwt *string
	{
		if folderReceiveListFoldersJWT != "" {
			jwt = &folderReceiveListFoldersJWT
		}
	}
	v := &folder.ReceiveListFoldersPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v, nil
}

// BuildListFoldersPayload builds the payload for the folder ListFolders
// endpoint from CLI flags.
func BuildListFoldersPayload(folderListFoldersJWT string) (*folder.ListFoldersPayload, error) {
	var jwt *string
	{
		if folderListFoldersJWT != "" {
			jwt = &folderListFoldersJWT
		}
	}
	v := &folder.ListFoldersPayload{}
	v.JWT = jwt

	return v, nil
}
