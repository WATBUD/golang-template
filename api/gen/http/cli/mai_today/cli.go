// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Mai.Today HTTP client CLI support package
//
// Command:
// $ goa gen mai.today/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	authenticationc "mai.today/api/gen/http/authentication/client"
	basec "mai.today/api/gen/http/base/client"
	folderc "mai.today/api/gen/http/folder/client"
	syncc "mai.today/api/gen/http/sync/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `authentication sign-in
base (receive-create-base|create-base|receive-delete-base|delete-base|receive-update-base-info|update-base-info|receive-reorder-base-nav-states|reorder-base-nav-states)
sync (receive-sync|sync)
folder (receive-create-folder|create-folder|receive-delete-folder|delete-folder|receive-update-folder|update-folder|receive-list-folders|list-folders)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` authentication sign-in --body '{
      "firebaseIdToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.Et9HFtf9R3GEMA0IICOfFMVXY7kkTX1wr4qCyhIf58U"
   }'` + "\n" +
		os.Args[0] + ` base receive-create-base --channel "669071b8a650a662b82285ca" --jwt "Rerum temporibus non eius neque modi dolores."` + "\n" +
		os.Args[0] + ` sync receive-sync --channel "669071b8a650a662b82285ca" --jwt "Consequatur rerum facere laborum et nisi hic."` + "\n" +
		os.Args[0] + ` folder receive-create-folder --channel "669071b8a650a662b82285ca" --jwt "Voluptas assumenda occaecati in aut."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		authenticationFlags = flag.NewFlagSet("authentication", flag.ContinueOnError)

		authenticationSignInFlags    = flag.NewFlagSet("sign-in", flag.ExitOnError)
		authenticationSignInBodyFlag = authenticationSignInFlags.String("body", "REQUIRED", "")

		baseFlags = flag.NewFlagSet("base", flag.ContinueOnError)

		baseReceiveCreateBaseFlags       = flag.NewFlagSet("receive-create-base", flag.ExitOnError)
		baseReceiveCreateBaseChannelFlag = baseReceiveCreateBaseFlags.String("channel", "REQUIRED", "使用者識別碼")
		baseReceiveCreateBaseJWTFlag     = baseReceiveCreateBaseFlags.String("jwt", "", "")

		baseCreateBaseFlags    = flag.NewFlagSet("create-base", flag.ExitOnError)
		baseCreateBaseBodyFlag = baseCreateBaseFlags.String("body", "REQUIRED", "")
		baseCreateBaseJWTFlag  = baseCreateBaseFlags.String("jwt", "", "")

		baseReceiveDeleteBaseFlags       = flag.NewFlagSet("receive-delete-base", flag.ExitOnError)
		baseReceiveDeleteBaseChannelFlag = baseReceiveDeleteBaseFlags.String("channel", "REQUIRED", "使用者識別碼")
		baseReceiveDeleteBaseJWTFlag     = baseReceiveDeleteBaseFlags.String("jwt", "", "")

		baseDeleteBaseFlags   = flag.NewFlagSet("delete-base", flag.ExitOnError)
		baseDeleteBaseIDFlag  = baseDeleteBaseFlags.String("id", "REQUIRED", "識別碼")
		baseDeleteBaseJWTFlag = baseDeleteBaseFlags.String("jwt", "", "")

		baseReceiveUpdateBaseInfoFlags       = flag.NewFlagSet("receive-update-base-info", flag.ExitOnError)
		baseReceiveUpdateBaseInfoChannelFlag = baseReceiveUpdateBaseInfoFlags.String("channel", "REQUIRED", "使用者識別碼")
		baseReceiveUpdateBaseInfoJWTFlag     = baseReceiveUpdateBaseInfoFlags.String("jwt", "", "")

		baseUpdateBaseInfoFlags    = flag.NewFlagSet("update-base-info", flag.ExitOnError)
		baseUpdateBaseInfoBodyFlag = baseUpdateBaseInfoFlags.String("body", "REQUIRED", "")
		baseUpdateBaseInfoIDFlag   = baseUpdateBaseInfoFlags.String("id", "REQUIRED", "識別碼")
		baseUpdateBaseInfoJWTFlag  = baseUpdateBaseInfoFlags.String("jwt", "", "")

		baseReceiveReorderBaseNavStatesFlags       = flag.NewFlagSet("receive-reorder-base-nav-states", flag.ExitOnError)
		baseReceiveReorderBaseNavStatesChannelFlag = baseReceiveReorderBaseNavStatesFlags.String("channel", "REQUIRED", "使用者識別碼")
		baseReceiveReorderBaseNavStatesJWTFlag     = baseReceiveReorderBaseNavStatesFlags.String("jwt", "", "")

		baseReorderBaseNavStatesFlags    = flag.NewFlagSet("reorder-base-nav-states", flag.ExitOnError)
		baseReorderBaseNavStatesBodyFlag = baseReorderBaseNavStatesFlags.String("body", "REQUIRED", "")
		baseReorderBaseNavStatesJWTFlag  = baseReorderBaseNavStatesFlags.String("jwt", "", "")

		syncFlags = flag.NewFlagSet("sync", flag.ContinueOnError)

		syncReceiveSyncFlags       = flag.NewFlagSet("receive-sync", flag.ExitOnError)
		syncReceiveSyncChannelFlag = syncReceiveSyncFlags.String("channel", "REQUIRED", "使用者識別碼")
		syncReceiveSyncJWTFlag     = syncReceiveSyncFlags.String("jwt", "", "")

		syncSyncFlags    = flag.NewFlagSet("sync", flag.ExitOnError)
		syncSyncBodyFlag = syncSyncFlags.String("body", "REQUIRED", "")
		syncSyncJWTFlag  = syncSyncFlags.String("jwt", "", "")

		folderFlags = flag.NewFlagSet("folder", flag.ContinueOnError)

		folderReceiveCreateFolderFlags       = flag.NewFlagSet("receive-create-folder", flag.ExitOnError)
		folderReceiveCreateFolderChannelFlag = folderReceiveCreateFolderFlags.String("channel", "REQUIRED", "使用者識別碼")
		folderReceiveCreateFolderJWTFlag     = folderReceiveCreateFolderFlags.String("jwt", "", "")

		folderCreateFolderFlags    = flag.NewFlagSet("create-folder", flag.ExitOnError)
		folderCreateFolderBodyFlag = folderCreateFolderFlags.String("body", "REQUIRED", "")
		folderCreateFolderJWTFlag  = folderCreateFolderFlags.String("jwt", "", "")

		folderReceiveDeleteFolderFlags       = flag.NewFlagSet("receive-delete-folder", flag.ExitOnError)
		folderReceiveDeleteFolderChannelFlag = folderReceiveDeleteFolderFlags.String("channel", "REQUIRED", "使用者識別碼")
		folderReceiveDeleteFolderJWTFlag     = folderReceiveDeleteFolderFlags.String("jwt", "", "")

		folderDeleteFolderFlags        = flag.NewFlagSet("delete-folder", flag.ExitOnError)
		folderDeleteFolderFolderIDFlag = folderDeleteFolderFlags.String("folder-id", "REQUIRED", "Folder identifier")
		folderDeleteFolderJWTFlag      = folderDeleteFolderFlags.String("jwt", "", "")

		folderReceiveUpdateFolderFlags       = flag.NewFlagSet("receive-update-folder", flag.ExitOnError)
		folderReceiveUpdateFolderChannelFlag = folderReceiveUpdateFolderFlags.String("channel", "REQUIRED", "使用者識別碼")
		folderReceiveUpdateFolderJWTFlag     = folderReceiveUpdateFolderFlags.String("jwt", "", "")

		folderUpdateFolderFlags        = flag.NewFlagSet("update-folder", flag.ExitOnError)
		folderUpdateFolderBodyFlag     = folderUpdateFolderFlags.String("body", "REQUIRED", "")
		folderUpdateFolderFolderIDFlag = folderUpdateFolderFlags.String("folder-id", "REQUIRED", "Folder identifier")
		folderUpdateFolderJWTFlag      = folderUpdateFolderFlags.String("jwt", "", "")

		folderReceiveListFoldersFlags       = flag.NewFlagSet("receive-list-folders", flag.ExitOnError)
		folderReceiveListFoldersChannelFlag = folderReceiveListFoldersFlags.String("channel", "REQUIRED", "使用者識別碼")
		folderReceiveListFoldersJWTFlag     = folderReceiveListFoldersFlags.String("jwt", "", "")

		folderListFoldersFlags   = flag.NewFlagSet("list-folders", flag.ExitOnError)
		folderListFoldersJWTFlag = folderListFoldersFlags.String("jwt", "", "")
	)
	authenticationFlags.Usage = authenticationUsage
	authenticationSignInFlags.Usage = authenticationSignInUsage

	baseFlags.Usage = baseUsage
	baseReceiveCreateBaseFlags.Usage = baseReceiveCreateBaseUsage
	baseCreateBaseFlags.Usage = baseCreateBaseUsage
	baseReceiveDeleteBaseFlags.Usage = baseReceiveDeleteBaseUsage
	baseDeleteBaseFlags.Usage = baseDeleteBaseUsage
	baseReceiveUpdateBaseInfoFlags.Usage = baseReceiveUpdateBaseInfoUsage
	baseUpdateBaseInfoFlags.Usage = baseUpdateBaseInfoUsage
	baseReceiveReorderBaseNavStatesFlags.Usage = baseReceiveReorderBaseNavStatesUsage
	baseReorderBaseNavStatesFlags.Usage = baseReorderBaseNavStatesUsage

	syncFlags.Usage = syncUsage
	syncReceiveSyncFlags.Usage = syncReceiveSyncUsage
	syncSyncFlags.Usage = syncSyncUsage

	folderFlags.Usage = folderUsage
	folderReceiveCreateFolderFlags.Usage = folderReceiveCreateFolderUsage
	folderCreateFolderFlags.Usage = folderCreateFolderUsage
	folderReceiveDeleteFolderFlags.Usage = folderReceiveDeleteFolderUsage
	folderDeleteFolderFlags.Usage = folderDeleteFolderUsage
	folderReceiveUpdateFolderFlags.Usage = folderReceiveUpdateFolderUsage
	folderUpdateFolderFlags.Usage = folderUpdateFolderUsage
	folderReceiveListFoldersFlags.Usage = folderReceiveListFoldersUsage
	folderListFoldersFlags.Usage = folderListFoldersUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "authentication":
			svcf = authenticationFlags
		case "base":
			svcf = baseFlags
		case "sync":
			svcf = syncFlags
		case "folder":
			svcf = folderFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "authentication":
			switch epn {
			case "sign-in":
				epf = authenticationSignInFlags

			}

		case "base":
			switch epn {
			case "receive-create-base":
				epf = baseReceiveCreateBaseFlags

			case "create-base":
				epf = baseCreateBaseFlags

			case "receive-delete-base":
				epf = baseReceiveDeleteBaseFlags

			case "delete-base":
				epf = baseDeleteBaseFlags

			case "receive-update-base-info":
				epf = baseReceiveUpdateBaseInfoFlags

			case "update-base-info":
				epf = baseUpdateBaseInfoFlags

			case "receive-reorder-base-nav-states":
				epf = baseReceiveReorderBaseNavStatesFlags

			case "reorder-base-nav-states":
				epf = baseReorderBaseNavStatesFlags

			}

		case "sync":
			switch epn {
			case "receive-sync":
				epf = syncReceiveSyncFlags

			case "sync":
				epf = syncSyncFlags

			}

		case "folder":
			switch epn {
			case "receive-create-folder":
				epf = folderReceiveCreateFolderFlags

			case "create-folder":
				epf = folderCreateFolderFlags

			case "receive-delete-folder":
				epf = folderReceiveDeleteFolderFlags

			case "delete-folder":
				epf = folderDeleteFolderFlags

			case "receive-update-folder":
				epf = folderReceiveUpdateFolderFlags

			case "update-folder":
				epf = folderUpdateFolderFlags

			case "receive-list-folders":
				epf = folderReceiveListFoldersFlags

			case "list-folders":
				epf = folderListFoldersFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "authentication":
			c := authenticationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "sign-in":
				endpoint = c.SignIn()
				data, err = authenticationc.BuildSignInPayload(*authenticationSignInBodyFlag)
			}
		case "base":
			c := basec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "receive-create-base":
				endpoint = c.ReceiveCreateBase()
				data, err = basec.BuildReceiveCreateBasePayload(*baseReceiveCreateBaseChannelFlag, *baseReceiveCreateBaseJWTFlag)
			case "create-base":
				endpoint = c.CreateBase()
				data, err = basec.BuildCreateBasePayload(*baseCreateBaseBodyFlag, *baseCreateBaseJWTFlag)
			case "receive-delete-base":
				endpoint = c.ReceiveDeleteBase()
				data, err = basec.BuildReceiveDeleteBasePayload(*baseReceiveDeleteBaseChannelFlag, *baseReceiveDeleteBaseJWTFlag)
			case "delete-base":
				endpoint = c.DeleteBase()
				data, err = basec.BuildDeleteBasePayload(*baseDeleteBaseIDFlag, *baseDeleteBaseJWTFlag)
			case "receive-update-base-info":
				endpoint = c.ReceiveUpdateBaseInfo()
				data, err = basec.BuildReceiveUpdateBaseInfoPayload(*baseReceiveUpdateBaseInfoChannelFlag, *baseReceiveUpdateBaseInfoJWTFlag)
			case "update-base-info":
				endpoint = c.UpdateBaseInfo()
				data, err = basec.BuildUpdateBaseInfoPayload(*baseUpdateBaseInfoBodyFlag, *baseUpdateBaseInfoIDFlag, *baseUpdateBaseInfoJWTFlag)
			case "receive-reorder-base-nav-states":
				endpoint = c.ReceiveReorderBaseNavStates()
				data, err = basec.BuildReceiveReorderBaseNavStatesPayload(*baseReceiveReorderBaseNavStatesChannelFlag, *baseReceiveReorderBaseNavStatesJWTFlag)
			case "reorder-base-nav-states":
				endpoint = c.ReorderBaseNavStates()
				data, err = basec.BuildReorderBaseNavStatesPayload(*baseReorderBaseNavStatesBodyFlag, *baseReorderBaseNavStatesJWTFlag)
			}
		case "sync":
			c := syncc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "receive-sync":
				endpoint = c.ReceiveSync()
				data, err = syncc.BuildReceiveSyncPayload(*syncReceiveSyncChannelFlag, *syncReceiveSyncJWTFlag)
			case "sync":
				endpoint = c.Sync()
				data, err = syncc.BuildSyncPayload(*syncSyncBodyFlag, *syncSyncJWTFlag)
			}
		case "folder":
			c := folderc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "receive-create-folder":
				endpoint = c.ReceiveCreateFolder()
				data, err = folderc.BuildReceiveCreateFolderPayload(*folderReceiveCreateFolderChannelFlag, *folderReceiveCreateFolderJWTFlag)
			case "create-folder":
				endpoint = c.CreateFolder()
				data, err = folderc.BuildCreateFolderPayload(*folderCreateFolderBodyFlag, *folderCreateFolderJWTFlag)
			case "receive-delete-folder":
				endpoint = c.ReceiveDeleteFolder()
				data, err = folderc.BuildReceiveDeleteFolderPayload(*folderReceiveDeleteFolderChannelFlag, *folderReceiveDeleteFolderJWTFlag)
			case "delete-folder":
				endpoint = c.DeleteFolder()
				data, err = folderc.BuildDeleteFolderPayload(*folderDeleteFolderFolderIDFlag, *folderDeleteFolderJWTFlag)
			case "receive-update-folder":
				endpoint = c.ReceiveUpdateFolder()
				data, err = folderc.BuildReceiveUpdateFolderPayload(*folderReceiveUpdateFolderChannelFlag, *folderReceiveUpdateFolderJWTFlag)
			case "update-folder":
				endpoint = c.UpdateFolder()
				data, err = folderc.BuildUpdateFolderPayload(*folderUpdateFolderBodyFlag, *folderUpdateFolderFolderIDFlag, *folderUpdateFolderJWTFlag)
			case "receive-list-folders":
				endpoint = c.ReceiveListFolders()
				data, err = folderc.BuildReceiveListFoldersPayload(*folderReceiveListFoldersChannelFlag, *folderReceiveListFoldersJWTFlag)
			case "list-folders":
				endpoint = c.ListFolders()
				data, err = folderc.BuildListFoldersPayload(*folderListFoldersJWTFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authenticationUsage displays the usage of the authentication command and its
// subcommands.
func authenticationUsage() {
	fmt.Fprintf(os.Stderr, `認證
Usage:
    %[1]s [globalflags] authentication COMMAND [flags]

COMMAND:
    sign-in: SignIn implements SignIn.

Additional help:
    %[1]s authentication COMMAND --help
`, os.Args[0])
}
func authenticationSignInUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] authentication sign-in -body JSON

SignIn implements SignIn.
    -body JSON: 

Example:
    %[1]s authentication sign-in --body '{
      "firebaseIdToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e30.Et9HFtf9R3GEMA0IICOfFMVXY7kkTX1wr4qCyhIf58U"
   }'
`, os.Args[0])
}

// baseUsage displays the usage of the base command and its subcommands.
func baseUsage() {
	fmt.Fprintf(os.Stderr, `基地
Usage:
    %[1]s [globalflags] base COMMAND [flags]

COMMAND:
    receive-create-base: ReceiveCreateBase implements receiveCreateBase.
    create-base: CreateBase implements CreateBase.
    receive-delete-base: ReceiveDeleteBase implements receiveDeleteBase.
    delete-base: DeleteBase implements DeleteBase.
    receive-update-base-info: ReceiveUpdateBaseInfo implements receiveUpdateBaseInfo.
    update-base-info: UpdateBaseInfo implements UpdateBaseInfo.
    receive-reorder-base-nav-states: ReceiveReorderBaseNavStates implements receiveReorderBaseNavStates.
    reorder-base-nav-states: ReorderBaseNavStates implements ReorderBaseNavStates.

Additional help:
    %[1]s base COMMAND --help
`, os.Args[0])
}
func baseReceiveCreateBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base receive-create-base -channel STRING -jwt STRING

ReceiveCreateBase implements receiveCreateBase.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s base receive-create-base --channel "669071b8a650a662b82285ca" --jwt "Rerum temporibus non eius neque modi dolores."
`, os.Args[0])
}

func baseCreateBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base create-base -body JSON -jwt STRING

CreateBase implements CreateBase.
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s base create-base --body '{
      "color": "#FF5733",
      "index": 0,
      "logo": "http://example.com/logo.png",
      "name": "基地 A"
   }' --jwt "Dolor doloribus."
`, os.Args[0])
}

func baseReceiveDeleteBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base receive-delete-base -channel STRING -jwt STRING

ReceiveDeleteBase implements receiveDeleteBase.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s base receive-delete-base --channel "669071b8a650a662b82285ca" --jwt "Voluptatem aut esse commodi."
`, os.Args[0])
}

func baseDeleteBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base delete-base -id STRING -jwt STRING

DeleteBase implements DeleteBase.
    -id STRING: 識別碼
    -jwt STRING: 

Example:
    %[1]s base delete-base --id "669071b8a650a662b82285ca" --jwt "Quam quisquam maiores libero."
`, os.Args[0])
}

func baseReceiveUpdateBaseInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base receive-update-base-info -channel STRING -jwt STRING

ReceiveUpdateBaseInfo implements receiveUpdateBaseInfo.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s base receive-update-base-info --channel "669071b8a650a662b82285ca" --jwt "Eos non deserunt aut velit sunt."
`, os.Args[0])
}

func baseUpdateBaseInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base update-base-info -body JSON -id STRING -jwt STRING

UpdateBaseInfo implements UpdateBaseInfo.
    -body JSON: 
    -id STRING: 識別碼
    -jwt STRING: 

Example:
    %[1]s base update-base-info --body '{
      "color": "#FF5733",
      "logo": "http://example.com/logo.png",
      "name": "基地 A"
   }' --id "669071b8a650a662b82285ca" --jwt "A quidem."
`, os.Args[0])
}

func baseReceiveReorderBaseNavStatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base receive-reorder-base-nav-states -channel STRING -jwt STRING

ReceiveReorderBaseNavStates implements receiveReorderBaseNavStates.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s base receive-reorder-base-nav-states --channel "669071b8a650a662b82285ca" --jwt "Eligendi veritatis sunt."
`, os.Args[0])
}

func baseReorderBaseNavStatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base reorder-base-nav-states -body JSON -jwt STRING

ReorderBaseNavStates implements ReorderBaseNavStates.
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s base reorder-base-nav-states --body '{
      "id": "669071b8a650a662b82285ca",
      "newIndex": 0
   }' --jwt "Est sunt aut cumque repudiandae."
`, os.Args[0])
}

// syncUsage displays the usage of the sync command and its subcommands.
func syncUsage() {
	fmt.Fprintf(os.Stderr, `資料同步
Usage:
    %[1]s [globalflags] sync COMMAND [flags]

COMMAND:
    receive-sync: ReceiveSync implements receiveSync.
    sync: Sync implements sync.

Additional help:
    %[1]s sync COMMAND --help
`, os.Args[0])
}
func syncReceiveSyncUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sync receive-sync -channel STRING -jwt STRING

ReceiveSync implements receiveSync.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s sync receive-sync --channel "669071b8a650a662b82285ca" --jwt "Consequatur rerum facere laborum et nisi hic."
`, os.Args[0])
}

func syncSyncUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sync sync -body JSON -jwt STRING

Sync implements sync.
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s sync sync --body '{
      "lastTimestamp": 1719188007000000000
   }' --jwt "Doloribus deserunt id non deserunt est."
`, os.Args[0])
}

// folderUsage displays the usage of the folder command and its subcommands.
func folderUsage() {
	fmt.Fprintf(os.Stderr, `The folder service provides operations for managing folders.
Usage:
    %[1]s [globalflags] folder COMMAND [flags]

COMMAND:
    receive-create-folder: ReceiveCreateFolder implements receiveCreateFolder.
    create-folder: CreateFolder implements CreateFolder.
    receive-delete-folder: ReceiveDeleteFolder implements receiveDeleteFolder.
    delete-folder: DeleteFolder implements DeleteFolder.
    receive-update-folder: ReceiveUpdateFolder implements receiveUpdateFolder.
    update-folder: UpdateFolder implements UpdateFolder.
    receive-list-folders: ReceiveListFolders implements receiveListFolders.
    list-folders: ListFolders implements ListFolders.

Additional help:
    %[1]s folder COMMAND --help
`, os.Args[0])
}
func folderReceiveCreateFolderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder receive-create-folder -channel STRING -jwt STRING

ReceiveCreateFolder implements receiveCreateFolder.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s folder receive-create-folder --channel "669071b8a650a662b82285ca" --jwt "Voluptas assumenda occaecati in aut."
`, os.Args[0])
}

func folderCreateFolderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder create-folder -body JSON -jwt STRING

CreateFolder implements CreateFolder.
    -body JSON: 
    -jwt STRING: 

Example:
    %[1]s folder create-folder --body '{
      "folder": {
         "baseId": "base123",
         "createdAt": "2024-01-01T00:00:00Z",
         "data": {
            "color": "red",
            "name": "My Folder"
         },
         "folderId": "123456",
         "parentId": "parent123",
         "position": 1,
         "type": "type123",
         "updatedAt": "2024-01-02T00:00:00Z"
      }
   }' --jwt "Nam officia ut et."
`, os.Args[0])
}

func folderReceiveDeleteFolderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder receive-delete-folder -channel STRING -jwt STRING

ReceiveDeleteFolder implements receiveDeleteFolder.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s folder receive-delete-folder --channel "669071b8a650a662b82285ca" --jwt "Dolores expedita accusantium iste in facilis ea."
`, os.Args[0])
}

func folderDeleteFolderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder delete-folder -folder-id STRING -jwt STRING

DeleteFolder implements DeleteFolder.
    -folder-id STRING: Folder identifier
    -jwt STRING: 

Example:
    %[1]s folder delete-folder --folder-id "123456" --jwt "Optio consequatur minima."
`, os.Args[0])
}

func folderReceiveUpdateFolderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder receive-update-folder -channel STRING -jwt STRING

ReceiveUpdateFolder implements receiveUpdateFolder.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s folder receive-update-folder --channel "669071b8a650a662b82285ca" --jwt "Nisi est consequatur."
`, os.Args[0])
}

func folderUpdateFolderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder update-folder -body JSON -folder-id STRING -jwt STRING

UpdateFolder implements UpdateFolder.
    -body JSON: 
    -folder-id STRING: Folder identifier
    -jwt STRING: 

Example:
    %[1]s folder update-folder --body '{
      "folder": {
         "baseId": "base123",
         "createdAt": "2024-01-01T00:00:00Z",
         "data": {
            "color": "red",
            "name": "My Folder"
         },
         "folderId": "123456",
         "parentId": "parent123",
         "position": 1,
         "type": "type123",
         "updatedAt": "2024-01-02T00:00:00Z"
      }
   }' --folder-id "123456" --jwt "Occaecati eveniet et architecto praesentium."
`, os.Args[0])
}

func folderReceiveListFoldersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder receive-list-folders -channel STRING -jwt STRING

ReceiveListFolders implements receiveListFolders.
    -channel STRING: 使用者識別碼
    -jwt STRING: 

Example:
    %[1]s folder receive-list-folders --channel "669071b8a650a662b82285ca" --jwt "Doloribus aut et assumenda et accusamus temporibus."
`, os.Args[0])
}

func folderListFoldersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] folder list-folders -jwt STRING

ListFolders implements ListFolders.
    -jwt STRING: 

Example:
    %[1]s folder list-folders --jwt "Aut praesentium iusto rerum odit."
`, os.Args[0])
}
