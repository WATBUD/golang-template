// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Base HTTP server types
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	base "mai.today/api/gen/base"
)

// CreateBaseRequestBody is the type of the "Base" service "CreateBase"
// endpoint HTTP request body.
type CreateBaseRequestBody struct {
	// 主題颜色
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
	// 順序
	Index *int `form:"index,omitempty" json:"index,omitempty" xml:"index,omitempty"`
	// 標識圖片的 URL
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// 名稱
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateBaseInfoRequestBody is the type of the "Base" service "UpdateBaseInfo"
// endpoint HTTP request body.
type UpdateBaseInfoRequestBody struct {
	// 主題颜色
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
	// 標識圖片的 URL
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// 名稱
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// ReorderBaseNavStatesRequestBody is the type of the "Base" service
// "ReorderBaseNavStates" endpoint HTTP request body.
type ReorderBaseNavStatesRequestBody struct {
	// 識別碼
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 新的順序
	NewIndex *int `form:"newIndex,omitempty" json:"newIndex,omitempty" xml:"newIndex,omitempty"`
}

// CreateBaseOKResponseBody is the type of the "Base" service "CreateBase"
// endpoint HTTP response body.
type CreateBaseOKResponseBody struct {
	Command *CommandResponseBody `form:"command" json:"command" xml:"command"`
	// 時間戳記
	Timestamp int64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// 資料
	Data *CreateBaseResultDataResponseBody `form:"data" json:"data" xml:"data"`
}

// DeleteBaseOKResponseBody is the type of the "Base" service "DeleteBase"
// endpoint HTTP response body.
type DeleteBaseOKResponseBody struct {
	Command *CommandResponseBody `form:"command" json:"command" xml:"command"`
	// 時間戳記
	Timestamp int64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// 資料
	Data *DeleteBaseResultDataResponseBody `form:"data" json:"data" xml:"data"`
}

// UpdateBaseInfoOKResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body.
type UpdateBaseInfoOKResponseBody struct {
	Command *CommandResponseBody `form:"command" json:"command" xml:"command"`
	// 時間戳記
	Timestamp int64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// 資料
	Data *BaseInfoResponseBody `form:"data" json:"data" xml:"data"`
}

// ReorderBaseNavStatesOKResponseBody is the type of the "Base" service
// "ReorderBaseNavStates" endpoint HTTP response body.
type ReorderBaseNavStatesOKResponseBody struct {
	Command *CommandResponseBody `form:"command" json:"command" xml:"command"`
	// 時間戳記
	Timestamp int64 `form:"timestamp" json:"timestamp" xml:"timestamp"`
	// 資料
	Data []*BaseNavStateResponseBody `form:"data" json:"data" xml:"data"`
}

// CreateBaseInvalidTokenResponseBody is the type of the "Base" service
// "CreateBase" endpoint HTTP response body for the "invalid token" error.
type CreateBaseInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBaseInvalidTokenResponseBody is the type of the "Base" service
// "DeleteBase" endpoint HTTP response body for the "invalid token" error.
type DeleteBaseInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBaseNotFoundResponseBody is the type of the "Base" service
// "DeleteBase" endpoint HTTP response body for the "not found" error.
type DeleteBaseNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBasePermissionDeniedResponseBody is the type of the "Base" service
// "DeleteBase" endpoint HTTP response body for the "permission denied" error.
type DeleteBasePermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBaseInfoInvalidTokenResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body for the "invalid token" error.
type UpdateBaseInfoInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBaseInfoNotFoundResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body for the "not found" error.
type UpdateBaseInfoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBaseInfoPermissionDeniedResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body for the "permission denied"
// error.
type UpdateBaseInfoPermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ReorderBaseNavStatesInvalidTokenResponseBody is the type of the "Base"
// service "ReorderBaseNavStates" endpoint HTTP response body for the "invalid
// token" error.
type ReorderBaseNavStatesInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CommandResponseBody is used to define fields on response body types.
type CommandResponseBody struct {
	// 類型
	Type string `form:"type" json:"type" xml:"type"`
}

// CreateBaseResultDataResponseBody is used to define fields on response body
// types.
type CreateBaseResultDataResponseBody struct {
	// 識別碼
	ID string `form:"id" json:"id" xml:"id"`
	// 基地資訊
	Info *BaseInfoResponseBody `form:"info" json:"info" xml:"info"`
	// 基地導覽列狀態
	NavState *BaseNavStateResponseBody `form:"navState" json:"navState" xml:"navState"`
}

// BaseInfoResponseBody is used to define fields on response body types.
type BaseInfoResponseBody struct {
	// 識別碼
	ID string `form:"id" json:"id" xml:"id"`
	// 基地識別碼
	BaseID string `form:"baseId" json:"baseId" xml:"baseId"`
	// 主題颜色
	Color string `form:"color" json:"color" xml:"color"`
	// 標識圖片的 URL
	Logo string `form:"logo" json:"logo" xml:"logo"`
	// 名稱
	Name string `form:"name" json:"name" xml:"name"`
	// 刪除時間
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// BaseNavStateResponseBody is used to define fields on response body types.
type BaseNavStateResponseBody struct {
	// 識別碼
	ID string `form:"id" json:"id" xml:"id"`
	// 基地識別碼
	BaseID string `form:"baseId" json:"baseId" xml:"baseId"`
	// 順序
	Index int `form:"index" json:"index" xml:"index"`
	// 刪除時間
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// DeleteBaseResultDataResponseBody is used to define fields on response body
// types.
type DeleteBaseResultDataResponseBody struct {
	// 基地識別碼
	BaseID string `form:"baseId" json:"baseId" xml:"baseId"`
}

// NewCreateBaseOKResponseBody builds the HTTP response body from the result of
// the "CreateBase" endpoint of the "Base" service.
func NewCreateBaseOKResponseBody(res *base.CreateBaseResult) *CreateBaseOKResponseBody {
	body := &CreateBaseOKResponseBody{
		Timestamp: res.Timestamp,
	}
	if res.Command != nil {
		body.Command = marshalBaseCommandToCommandResponseBody(res.Command)
	}
	if res.Data != nil {
		body.Data = marshalBaseCreateBaseResultDataToCreateBaseResultDataResponseBody(res.Data)
	}
	return body
}

// NewDeleteBaseOKResponseBody builds the HTTP response body from the result of
// the "DeleteBase" endpoint of the "Base" service.
func NewDeleteBaseOKResponseBody(res *base.DeleteBaseResult) *DeleteBaseOKResponseBody {
	body := &DeleteBaseOKResponseBody{
		Timestamp: res.Timestamp,
	}
	if res.Command != nil {
		body.Command = marshalBaseCommandToCommandResponseBody(res.Command)
	}
	if res.Data != nil {
		body.Data = marshalBaseDeleteBaseResultDataToDeleteBaseResultDataResponseBody(res.Data)
	}
	return body
}

// NewUpdateBaseInfoOKResponseBody builds the HTTP response body from the
// result of the "UpdateBaseInfo" endpoint of the "Base" service.
func NewUpdateBaseInfoOKResponseBody(res *base.UpdateBaseInfoResult) *UpdateBaseInfoOKResponseBody {
	body := &UpdateBaseInfoOKResponseBody{
		Timestamp: res.Timestamp,
	}
	if res.Command != nil {
		body.Command = marshalBaseCommandToCommandResponseBody(res.Command)
	}
	if res.Data != nil {
		body.Data = marshalBaseBaseInfoToBaseInfoResponseBody(res.Data)
	}
	return body
}

// NewReorderBaseNavStatesOKResponseBody builds the HTTP response body from the
// result of the "ReorderBaseNavStates" endpoint of the "Base" service.
func NewReorderBaseNavStatesOKResponseBody(res *base.ReorderBaseNavStateResult) *ReorderBaseNavStatesOKResponseBody {
	body := &ReorderBaseNavStatesOKResponseBody{
		Timestamp: res.Timestamp,
	}
	if res.Command != nil {
		body.Command = marshalBaseCommandToCommandResponseBody(res.Command)
	}
	if res.Data != nil {
		body.Data = make([]*BaseNavStateResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalBaseBaseNavStateToBaseNavStateResponseBody(val)
		}
	} else {
		body.Data = []*BaseNavStateResponseBody{}
	}
	return body
}

// NewCreateBaseInvalidTokenResponseBody builds the HTTP response body from the
// result of the "CreateBase" endpoint of the "Base" service.
func NewCreateBaseInvalidTokenResponseBody(res *goa.ServiceError) *CreateBaseInvalidTokenResponseBody {
	body := &CreateBaseInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBaseInvalidTokenResponseBody builds the HTTP response body from the
// result of the "DeleteBase" endpoint of the "Base" service.
func NewDeleteBaseInvalidTokenResponseBody(res *goa.ServiceError) *DeleteBaseInvalidTokenResponseBody {
	body := &DeleteBaseInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBaseNotFoundResponseBody builds the HTTP response body from the
// result of the "DeleteBase" endpoint of the "Base" service.
func NewDeleteBaseNotFoundResponseBody(res *goa.ServiceError) *DeleteBaseNotFoundResponseBody {
	body := &DeleteBaseNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBasePermissionDeniedResponseBody builds the HTTP response body from
// the result of the "DeleteBase" endpoint of the "Base" service.
func NewDeleteBasePermissionDeniedResponseBody(res *goa.ServiceError) *DeleteBasePermissionDeniedResponseBody {
	body := &DeleteBasePermissionDeniedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBaseInfoInvalidTokenResponseBody builds the HTTP response body from
// the result of the "UpdateBaseInfo" endpoint of the "Base" service.
func NewUpdateBaseInfoInvalidTokenResponseBody(res *goa.ServiceError) *UpdateBaseInfoInvalidTokenResponseBody {
	body := &UpdateBaseInfoInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBaseInfoNotFoundResponseBody builds the HTTP response body from the
// result of the "UpdateBaseInfo" endpoint of the "Base" service.
func NewUpdateBaseInfoNotFoundResponseBody(res *goa.ServiceError) *UpdateBaseInfoNotFoundResponseBody {
	body := &UpdateBaseInfoNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBaseInfoPermissionDeniedResponseBody builds the HTTP response body
// from the result of the "UpdateBaseInfo" endpoint of the "Base" service.
func NewUpdateBaseInfoPermissionDeniedResponseBody(res *goa.ServiceError) *UpdateBaseInfoPermissionDeniedResponseBody {
	body := &UpdateBaseInfoPermissionDeniedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReorderBaseNavStatesInvalidTokenResponseBody builds the HTTP response
// body from the result of the "ReorderBaseNavStates" endpoint of the "Base"
// service.
func NewReorderBaseNavStatesInvalidTokenResponseBody(res *goa.ServiceError) *ReorderBaseNavStatesInvalidTokenResponseBody {
	body := &ReorderBaseNavStatesInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReceiveCreateBasePayload builds a Base service receiveCreateBase endpoint
// payload.
func NewReceiveCreateBasePayload(channel string, jwt *string) *base.ReceiveCreateBasePayload {
	v := &base.ReceiveCreateBasePayload{}
	v.Channel = channel
	v.JWT = jwt

	return v
}

// NewCreateBasePayload builds a Base service CreateBase endpoint payload.
func NewCreateBasePayload(body *CreateBaseRequestBody, jwt *string) *base.CreateBasePayload {
	v := &base.CreateBasePayload{
		Color: *body.Color,
		Logo:  *body.Logo,
		Name:  *body.Name,
	}
	if body.Index != nil {
		v.Index = *body.Index
	}
	if body.Index == nil {
		v.Index = 1
	}
	v.JWT = jwt

	return v
}

// NewReceiveDeleteBasePayload builds a Base service receiveDeleteBase endpoint
// payload.
func NewReceiveDeleteBasePayload(channel string, jwt *string) *base.ReceiveDeleteBasePayload {
	v := &base.ReceiveDeleteBasePayload{}
	v.Channel = channel
	v.JWT = jwt

	return v
}

// NewDeleteBasePayload builds a Base service DeleteBase endpoint payload.
func NewDeleteBasePayload(id string, jwt *string) *base.DeleteBasePayload {
	v := &base.DeleteBasePayload{}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewReceiveUpdateBaseInfoPayload builds a Base service receiveUpdateBaseInfo
// endpoint payload.
func NewReceiveUpdateBaseInfoPayload(channel string, jwt *string) *base.ReceiveUpdateBaseInfoPayload {
	v := &base.ReceiveUpdateBaseInfoPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v
}

// NewUpdateBaseInfoPayload builds a Base service UpdateBaseInfo endpoint
// payload.
func NewUpdateBaseInfoPayload(body *UpdateBaseInfoRequestBody, id string, jwt *string) *base.UpdateBaseInfoPayload {
	v := &base.UpdateBaseInfoPayload{
		Color: *body.Color,
		Logo:  *body.Logo,
		Name:  *body.Name,
	}
	v.ID = id
	v.JWT = jwt

	return v
}

// NewReceiveReorderBaseNavStatesPayload builds a Base service
// receiveReorderBaseNavStates endpoint payload.
func NewReceiveReorderBaseNavStatesPayload(channel string, jwt *string) *base.ReceiveReorderBaseNavStatesPayload {
	v := &base.ReceiveReorderBaseNavStatesPayload{}
	v.Channel = channel
	v.JWT = jwt

	return v
}

// NewReorderBaseNavStatesPayload builds a Base service ReorderBaseNavStates
// endpoint payload.
func NewReorderBaseNavStatesPayload(body *ReorderBaseNavStatesRequestBody, jwt *string) *base.ReorderBaseNavStatesPayload {
	v := &base.ReorderBaseNavStatesPayload{
		ID:       *body.ID,
		NewIndex: *body.NewIndex,
	}
	v.JWT = jwt

	return v
}

// ValidateCreateBaseRequestBody runs the validations defined on
// CreateBaseRequestBody
func ValidateCreateBaseRequestBody(body *CreateBaseRequestBody) (err error) {
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.Logo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("logo", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Color != nil {
		if utf8.RuneCountInString(*body.Color) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.color", *body.Color, utf8.RuneCountInString(*body.Color), 1, true))
		}
	}
	if body.Color != nil {
		if utf8.RuneCountInString(*body.Color) > 16 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.color", *body.Color, utf8.RuneCountInString(*body.Color), 16, false))
		}
	}
	if body.Index != nil {
		if *body.Index < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.index", *body.Index, 1, true))
		}
	}
	if body.Logo != nil {
		if utf8.RuneCountInString(*body.Logo) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.logo", *body.Logo, utf8.RuneCountInString(*body.Logo), 1, true))
		}
	}
	if body.Logo != nil {
		if utf8.RuneCountInString(*body.Logo) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.logo", *body.Logo, utf8.RuneCountInString(*body.Logo), 1024, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 128, false))
		}
	}
	return
}

// ValidateUpdateBaseInfoRequestBody runs the validations defined on
// UpdateBaseInfoRequestBody
func ValidateUpdateBaseInfoRequestBody(body *UpdateBaseInfoRequestBody) (err error) {
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.Logo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("logo", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Color != nil {
		if utf8.RuneCountInString(*body.Color) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.color", *body.Color, utf8.RuneCountInString(*body.Color), 1, true))
		}
	}
	if body.Color != nil {
		if utf8.RuneCountInString(*body.Color) > 16 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.color", *body.Color, utf8.RuneCountInString(*body.Color), 16, false))
		}
	}
	if body.Logo != nil {
		if utf8.RuneCountInString(*body.Logo) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.logo", *body.Logo, utf8.RuneCountInString(*body.Logo), 1, true))
		}
	}
	if body.Logo != nil {
		if utf8.RuneCountInString(*body.Logo) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.logo", *body.Logo, utf8.RuneCountInString(*body.Logo), 1024, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 128, false))
		}
	}
	return
}

// ValidateReorderBaseNavStatesRequestBody runs the validations defined on
// ReorderBaseNavStatesRequestBody
func ValidateReorderBaseNavStatesRequestBody(body *ReorderBaseNavStatesRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.NewIndex == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("newIndex", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, false))
		}
	}
	if body.NewIndex != nil {
		if *body.NewIndex < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.newIndex", *body.NewIndex, 1, true))
		}
	}
	return
}
