// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Base HTTP server
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
	base "mai.today/api/gen/base"
)

// Server lists the Base service endpoint HTTP handlers.
type Server struct {
	Mounts                      []*MountPoint
	ReceiveCreateBase           http.Handler
	CreateBase                  http.Handler
	ReceiveDeleteBase           http.Handler
	DeleteBase                  http.Handler
	ReceiveUpdateBaseInfo       http.Handler
	UpdateBaseInfo              http.Handler
	ReceiveReorderBaseNavStates http.Handler
	ReorderBaseNavStates        http.Handler
	CORS                        http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Base service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *base.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ReceiveCreateBase", "GET", "/{channel}/createBase"},
			{"CreateBase", "POST", "/base"},
			{"ReceiveDeleteBase", "GET", "/{channel}/deleteBase"},
			{"DeleteBase", "DELETE", "/base/{id}"},
			{"ReceiveUpdateBaseInfo", "GET", "/{channel}/updateBaseInfo"},
			{"UpdateBaseInfo", "PUT", "/base/{id}/info"},
			{"ReceiveReorderBaseNavStates", "GET", "/{channel}/reorderBaseNavStates"},
			{"ReorderBaseNavStates", "PUT", "/base/nav-state/reorder"},
			{"CORS", "OPTIONS", "/{channel}/createBase"},
			{"CORS", "OPTIONS", "/base"},
			{"CORS", "OPTIONS", "/{channel}/deleteBase"},
			{"CORS", "OPTIONS", "/base/{id}"},
			{"CORS", "OPTIONS", "/{channel}/updateBaseInfo"},
			{"CORS", "OPTIONS", "/base/{id}/info"},
			{"CORS", "OPTIONS", "/{channel}/reorderBaseNavStates"},
			{"CORS", "OPTIONS", "/base/nav-state/reorder"},
		},
		ReceiveCreateBase:           NewReceiveCreateBaseHandler(e.ReceiveCreateBase, mux, decoder, encoder, errhandler, formatter),
		CreateBase:                  NewCreateBaseHandler(e.CreateBase, mux, decoder, encoder, errhandler, formatter),
		ReceiveDeleteBase:           NewReceiveDeleteBaseHandler(e.ReceiveDeleteBase, mux, decoder, encoder, errhandler, formatter),
		DeleteBase:                  NewDeleteBaseHandler(e.DeleteBase, mux, decoder, encoder, errhandler, formatter),
		ReceiveUpdateBaseInfo:       NewReceiveUpdateBaseInfoHandler(e.ReceiveUpdateBaseInfo, mux, decoder, encoder, errhandler, formatter),
		UpdateBaseInfo:              NewUpdateBaseInfoHandler(e.UpdateBaseInfo, mux, decoder, encoder, errhandler, formatter),
		ReceiveReorderBaseNavStates: NewReceiveReorderBaseNavStatesHandler(e.ReceiveReorderBaseNavStates, mux, decoder, encoder, errhandler, formatter),
		ReorderBaseNavStates:        NewReorderBaseNavStatesHandler(e.ReorderBaseNavStates, mux, decoder, encoder, errhandler, formatter),
		CORS:                        NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Base" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ReceiveCreateBase = m(s.ReceiveCreateBase)
	s.CreateBase = m(s.CreateBase)
	s.ReceiveDeleteBase = m(s.ReceiveDeleteBase)
	s.DeleteBase = m(s.DeleteBase)
	s.ReceiveUpdateBaseInfo = m(s.ReceiveUpdateBaseInfo)
	s.UpdateBaseInfo = m(s.UpdateBaseInfo)
	s.ReceiveReorderBaseNavStates = m(s.ReceiveReorderBaseNavStates)
	s.ReorderBaseNavStates = m(s.ReorderBaseNavStates)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return base.MethodNames[:] }

// Mount configures the mux to serve the Base endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountReceiveCreateBaseHandler(mux, h.ReceiveCreateBase)
	MountCreateBaseHandler(mux, h.CreateBase)
	MountReceiveDeleteBaseHandler(mux, h.ReceiveDeleteBase)
	MountDeleteBaseHandler(mux, h.DeleteBase)
	MountReceiveUpdateBaseInfoHandler(mux, h.ReceiveUpdateBaseInfo)
	MountUpdateBaseInfoHandler(mux, h.UpdateBaseInfo)
	MountReceiveReorderBaseNavStatesHandler(mux, h.ReceiveReorderBaseNavStates)
	MountReorderBaseNavStatesHandler(mux, h.ReorderBaseNavStates)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the Base endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountReceiveCreateBaseHandler configures the mux to serve the "Base" service
// "receiveCreateBase" endpoint.
func MountReceiveCreateBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/createBase", f)
}

// NewReceiveCreateBaseHandler creates a HTTP handler which loads the HTTP
// request and calls the "Base" service "receiveCreateBase" endpoint.
func NewReceiveCreateBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveCreateBaseRequest(mux, decoder)
		encodeResponse = EncodeReceiveCreateBaseResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveCreateBase")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateBaseHandler configures the mux to serve the "Base" service
// "CreateBase" endpoint.
func MountCreateBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/base", f)
}

// NewCreateBaseHandler creates a HTTP handler which loads the HTTP request and
// calls the "Base" service "CreateBase" endpoint.
func NewCreateBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateBaseRequest(mux, decoder)
		encodeResponse = EncodeCreateBaseResponse(encoder)
		encodeError    = EncodeCreateBaseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateBase")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReceiveDeleteBaseHandler configures the mux to serve the "Base" service
// "receiveDeleteBase" endpoint.
func MountReceiveDeleteBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/deleteBase", f)
}

// NewReceiveDeleteBaseHandler creates a HTTP handler which loads the HTTP
// request and calls the "Base" service "receiveDeleteBase" endpoint.
func NewReceiveDeleteBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveDeleteBaseRequest(mux, decoder)
		encodeResponse = EncodeReceiveDeleteBaseResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveDeleteBase")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteBaseHandler configures the mux to serve the "Base" service
// "DeleteBase" endpoint.
func MountDeleteBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/base/{id}", f)
}

// NewDeleteBaseHandler creates a HTTP handler which loads the HTTP request and
// calls the "Base" service "DeleteBase" endpoint.
func NewDeleteBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteBaseRequest(mux, decoder)
		encodeResponse = EncodeDeleteBaseResponse(encoder)
		encodeError    = EncodeDeleteBaseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteBase")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReceiveUpdateBaseInfoHandler configures the mux to serve the "Base"
// service "receiveUpdateBaseInfo" endpoint.
func MountReceiveUpdateBaseInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/updateBaseInfo", f)
}

// NewReceiveUpdateBaseInfoHandler creates a HTTP handler which loads the HTTP
// request and calls the "Base" service "receiveUpdateBaseInfo" endpoint.
func NewReceiveUpdateBaseInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveUpdateBaseInfoRequest(mux, decoder)
		encodeResponse = EncodeReceiveUpdateBaseInfoResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveUpdateBaseInfo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateBaseInfoHandler configures the mux to serve the "Base" service
// "UpdateBaseInfo" endpoint.
func MountUpdateBaseInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/base/{id}/info", f)
}

// NewUpdateBaseInfoHandler creates a HTTP handler which loads the HTTP request
// and calls the "Base" service "UpdateBaseInfo" endpoint.
func NewUpdateBaseInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateBaseInfoRequest(mux, decoder)
		encodeResponse = EncodeUpdateBaseInfoResponse(encoder)
		encodeError    = EncodeUpdateBaseInfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateBaseInfo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReceiveReorderBaseNavStatesHandler configures the mux to serve the
// "Base" service "receiveReorderBaseNavStates" endpoint.
func MountReceiveReorderBaseNavStatesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/{channel}/reorderBaseNavStates", f)
}

// NewReceiveReorderBaseNavStatesHandler creates a HTTP handler which loads the
// HTTP request and calls the "Base" service "receiveReorderBaseNavStates"
// endpoint.
func NewReceiveReorderBaseNavStatesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReceiveReorderBaseNavStatesRequest(mux, decoder)
		encodeResponse = EncodeReceiveReorderBaseNavStatesResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "receiveReorderBaseNavStates")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReorderBaseNavStatesHandler configures the mux to serve the "Base"
// service "ReorderBaseNavStates" endpoint.
func MountReorderBaseNavStatesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBaseOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/base/nav-state/reorder", f)
}

// NewReorderBaseNavStatesHandler creates a HTTP handler which loads the HTTP
// request and calls the "Base" service "ReorderBaseNavStates" endpoint.
func NewReorderBaseNavStatesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeReorderBaseNavStatesRequest(mux, decoder)
		encodeResponse = EncodeReorderBaseNavStatesResponse(encoder)
		encodeError    = EncodeReorderBaseNavStatesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ReorderBaseNavStates")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Base")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service Base.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleBaseOrigin(h)
	mux.Handle("OPTIONS", "/{channel}/createBase", h.ServeHTTP)
	mux.Handle("OPTIONS", "/base", h.ServeHTTP)
	mux.Handle("OPTIONS", "/{channel}/deleteBase", h.ServeHTTP)
	mux.Handle("OPTIONS", "/base/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/{channel}/updateBaseInfo", h.ServeHTTP)
	mux.Handle("OPTIONS", "/base/{id}/info", h.ServeHTTP)
	mux.Handle("OPTIONS", "/{channel}/reorderBaseNavStates", h.ServeHTTP)
	mux.Handle("OPTIONS", "/base/nav-state/reorder", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleBaseOrigin applies the CORS response headers corresponding to the
// origin for the service Base.
func HandleBaseOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, PATCH, DELETE, CONNECT, OPTIONS, TRACE")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
