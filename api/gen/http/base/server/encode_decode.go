// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Base HTTP server encoders and decoders
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	base "mai.today/api/gen/base"
)

// EncodeReceiveCreateBaseResponse returns an encoder for responses returned by
// the Base receiveCreateBase endpoint.
func EncodeReceiveCreateBaseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveCreateBaseRequest returns a decoder for requests sent to the
// Base receiveCreateBase endpoint.
func DecodeReceiveCreateBaseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveCreateBasePayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateBaseResponse returns an encoder for responses returned by the
// Base CreateBase endpoint.
func EncodeCreateBaseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*base.CreateBaseResult)
		enc := encoder(ctx, w)
		body := NewCreateBaseOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateBaseRequest returns a decoder for requests sent to the Base
// CreateBase endpoint.
func DecodeCreateBaseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateBaseRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateBaseRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewCreateBasePayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateBaseError returns an encoder for errors returned by the
// CreateBase Base endpoint.
func EncodeCreateBaseError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateBaseInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReceiveDeleteBaseResponse returns an encoder for responses returned by
// the Base receiveDeleteBase endpoint.
func EncodeReceiveDeleteBaseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveDeleteBaseRequest returns a decoder for requests sent to the
// Base receiveDeleteBase endpoint.
func DecodeReceiveDeleteBaseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveDeleteBasePayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteBaseResponse returns an encoder for responses returned by the
// Base DeleteBase endpoint.
func EncodeDeleteBaseResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*base.DeleteBaseResult)
		enc := encoder(ctx, w)
		body := NewDeleteBaseOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteBaseRequest returns a decoder for requests sent to the Base
// DeleteBase endpoint.
func DecodeDeleteBaseRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  string
			jwt *string
			err error

			params = mux.Vars(r)
		)
		id = params["id"]
		if utf8.RuneCountInString(id) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 24, true))
		}
		if utf8.RuneCountInString(id) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteBasePayload(id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteBaseError returns an encoder for errors returned by the
// DeleteBase Base endpoint.
func EncodeDeleteBaseError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteBaseInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "not found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteBaseNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "permission denied":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteBasePermissionDeniedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReceiveUpdateBaseInfoResponse returns an encoder for responses
// returned by the Base receiveUpdateBaseInfo endpoint.
func EncodeReceiveUpdateBaseInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveUpdateBaseInfoRequest returns a decoder for requests sent to
// the Base receiveUpdateBaseInfo endpoint.
func DecodeReceiveUpdateBaseInfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveUpdateBaseInfoPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateBaseInfoResponse returns an encoder for responses returned by
// the Base UpdateBaseInfo endpoint.
func EncodeUpdateBaseInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*base.UpdateBaseInfoResult)
		enc := encoder(ctx, w)
		body := NewUpdateBaseInfoOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateBaseInfoRequest returns a decoder for requests sent to the Base
// UpdateBaseInfo endpoint.
func DecodeUpdateBaseInfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateBaseInfoRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateBaseInfoRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id  string
			jwt *string

			params = mux.Vars(r)
		)
		id = params["id"]
		if utf8.RuneCountInString(id) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 24, true))
		}
		if utf8.RuneCountInString(id) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("id", id, utf8.RuneCountInString(id), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateBaseInfoPayload(&body, id, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateBaseInfoError returns an encoder for errors returned by the
// UpdateBaseInfo Base endpoint.
func EncodeUpdateBaseInfoError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateBaseInfoInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "not found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateBaseInfoNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "permission denied":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateBaseInfoPermissionDeniedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeReceiveReorderBaseNavStatesResponse returns an encoder for responses
// returned by the Base receiveReorderBaseNavStates endpoint.
func EncodeReceiveReorderBaseNavStatesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusSwitchingProtocols)
		return nil
	}
}

// DecodeReceiveReorderBaseNavStatesRequest returns a decoder for requests sent
// to the Base receiveReorderBaseNavStates endpoint.
func DecodeReceiveReorderBaseNavStatesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			channel string
			jwt     *string
			err     error

			params = mux.Vars(r)
		)
		channel = params["channel"]
		if utf8.RuneCountInString(channel) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, true))
		}
		if utf8.RuneCountInString(channel) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("channel", channel, utf8.RuneCountInString(channel), 24, false))
		}
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewReceiveReorderBaseNavStatesPayload(channel, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeReorderBaseNavStatesResponse returns an encoder for responses returned
// by the Base ReorderBaseNavStates endpoint.
func EncodeReorderBaseNavStatesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*base.ReorderBaseNavStateResult)
		enc := encoder(ctx, w)
		body := NewReorderBaseNavStatesOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeReorderBaseNavStatesRequest returns a decoder for requests sent to the
// Base ReorderBaseNavStates endpoint.
func DecodeReorderBaseNavStatesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body ReorderBaseNavStatesRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateReorderBaseNavStatesRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			jwt *string
		)
		jwtRaw := r.Header.Get("Authorization")
		if jwtRaw != "" {
			jwt = &jwtRaw
		}
		payload := NewReorderBaseNavStatesPayload(&body, jwt)
		if payload.JWT != nil {
			if strings.Contains(*payload.JWT, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.JWT, " ", 2)[1]
				payload.JWT = &cred
			}
		}

		return payload, nil
	}
}

// EncodeReorderBaseNavStatesError returns an encoder for errors returned by
// the ReorderBaseNavStates Base endpoint.
func EncodeReorderBaseNavStatesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid token":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewReorderBaseNavStatesInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalBaseCommandToCommandResponseBody builds a value of type
// *CommandResponseBody from a value of type *base.Command.
func marshalBaseCommandToCommandResponseBody(v *base.Command) *CommandResponseBody {
	res := &CommandResponseBody{
		Type: v.Type,
	}

	return res
}

// marshalBaseCreateBaseResultDataToCreateBaseResultDataResponseBody builds a
// value of type *CreateBaseResultDataResponseBody from a value of type
// *base.CreateBaseResultData.
func marshalBaseCreateBaseResultDataToCreateBaseResultDataResponseBody(v *base.CreateBaseResultData) *CreateBaseResultDataResponseBody {
	res := &CreateBaseResultDataResponseBody{
		ID: v.ID,
	}
	if v.Info != nil {
		res.Info = marshalBaseBaseInfoToBaseInfoResponseBody(v.Info)
	}
	if v.NavState != nil {
		res.NavState = marshalBaseBaseNavStateToBaseNavStateResponseBody(v.NavState)
	}

	return res
}

// marshalBaseBaseInfoToBaseInfoResponseBody builds a value of type
// *BaseInfoResponseBody from a value of type *base.BaseInfo.
func marshalBaseBaseInfoToBaseInfoResponseBody(v *base.BaseInfo) *BaseInfoResponseBody {
	res := &BaseInfoResponseBody{
		ID:        v.ID,
		BaseID:    v.BaseID,
		Color:     v.Color,
		Logo:      v.Logo,
		Name:      v.Name,
		DeletedAt: v.DeletedAt,
	}

	return res
}

// marshalBaseBaseNavStateToBaseNavStateResponseBody builds a value of type
// *BaseNavStateResponseBody from a value of type *base.BaseNavState.
func marshalBaseBaseNavStateToBaseNavStateResponseBody(v *base.BaseNavState) *BaseNavStateResponseBody {
	res := &BaseNavStateResponseBody{
		ID:        v.ID,
		BaseID:    v.BaseID,
		Index:     v.Index,
		DeletedAt: v.DeletedAt,
	}

	return res
}

// marshalBaseDeleteBaseResultDataToDeleteBaseResultDataResponseBody builds a
// value of type *DeleteBaseResultDataResponseBody from a value of type
// *base.DeleteBaseResultData.
func marshalBaseDeleteBaseResultDataToDeleteBaseResultDataResponseBody(v *base.DeleteBaseResultData) *DeleteBaseResultDataResponseBody {
	res := &DeleteBaseResultDataResponseBody{
		BaseID: v.BaseID,
	}

	return res
}
