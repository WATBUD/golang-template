// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Base client HTTP transport
//
// Command:
// $ goa gen mai.today/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Base service endpoint HTTP clients.
type Client struct {
	// ReceiveCreateBase Doer is the HTTP client used to make requests to the
	// receiveCreateBase endpoint.
	ReceiveCreateBaseDoer goahttp.Doer

	// CreateBase Doer is the HTTP client used to make requests to the CreateBase
	// endpoint.
	CreateBaseDoer goahttp.Doer

	// ReceiveDeleteBase Doer is the HTTP client used to make requests to the
	// receiveDeleteBase endpoint.
	ReceiveDeleteBaseDoer goahttp.Doer

	// DeleteBase Doer is the HTTP client used to make requests to the DeleteBase
	// endpoint.
	DeleteBaseDoer goahttp.Doer

	// ReceiveUpdateBaseInfo Doer is the HTTP client used to make requests to the
	// receiveUpdateBaseInfo endpoint.
	ReceiveUpdateBaseInfoDoer goahttp.Doer

	// UpdateBaseInfo Doer is the HTTP client used to make requests to the
	// UpdateBaseInfo endpoint.
	UpdateBaseInfoDoer goahttp.Doer

	// ReceiveReorderBaseNavStates Doer is the HTTP client used to make requests to
	// the receiveReorderBaseNavStates endpoint.
	ReceiveReorderBaseNavStatesDoer goahttp.Doer

	// ReorderBaseNavStates Doer is the HTTP client used to make requests to the
	// ReorderBaseNavStates endpoint.
	ReorderBaseNavStatesDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Base service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ReceiveCreateBaseDoer:           doer,
		CreateBaseDoer:                  doer,
		ReceiveDeleteBaseDoer:           doer,
		DeleteBaseDoer:                  doer,
		ReceiveUpdateBaseInfoDoer:       doer,
		UpdateBaseInfoDoer:              doer,
		ReceiveReorderBaseNavStatesDoer: doer,
		ReorderBaseNavStatesDoer:        doer,
		CORSDoer:                        doer,
		RestoreResponseBody:             restoreBody,
		scheme:                          scheme,
		host:                            host,
		decoder:                         dec,
		encoder:                         enc,
	}
}

// ReceiveCreateBase returns an endpoint that makes HTTP requests to the Base
// service receiveCreateBase server.
func (c *Client) ReceiveCreateBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeReceiveCreateBaseRequest(c.encoder)
		decodeResponse = DecodeReceiveCreateBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReceiveCreateBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReceiveCreateBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "receiveCreateBase", err)
		}
		return decodeResponse(resp)
	}
}

// CreateBase returns an endpoint that makes HTTP requests to the Base service
// CreateBase server.
func (c *Client) CreateBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateBaseRequest(c.encoder)
		decodeResponse = DecodeCreateBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "CreateBase", err)
		}
		return decodeResponse(resp)
	}
}

// ReceiveDeleteBase returns an endpoint that makes HTTP requests to the Base
// service receiveDeleteBase server.
func (c *Client) ReceiveDeleteBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeReceiveDeleteBaseRequest(c.encoder)
		decodeResponse = DecodeReceiveDeleteBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReceiveDeleteBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReceiveDeleteBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "receiveDeleteBase", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteBase returns an endpoint that makes HTTP requests to the Base service
// DeleteBase server.
func (c *Client) DeleteBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteBaseRequest(c.encoder)
		decodeResponse = DecodeDeleteBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "DeleteBase", err)
		}
		return decodeResponse(resp)
	}
}

// ReceiveUpdateBaseInfo returns an endpoint that makes HTTP requests to the
// Base service receiveUpdateBaseInfo server.
func (c *Client) ReceiveUpdateBaseInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeReceiveUpdateBaseInfoRequest(c.encoder)
		decodeResponse = DecodeReceiveUpdateBaseInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReceiveUpdateBaseInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReceiveUpdateBaseInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "receiveUpdateBaseInfo", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateBaseInfo returns an endpoint that makes HTTP requests to the Base
// service UpdateBaseInfo server.
func (c *Client) UpdateBaseInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateBaseInfoRequest(c.encoder)
		decodeResponse = DecodeUpdateBaseInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateBaseInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateBaseInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "UpdateBaseInfo", err)
		}
		return decodeResponse(resp)
	}
}

// ReceiveReorderBaseNavStates returns an endpoint that makes HTTP requests to
// the Base service receiveReorderBaseNavStates server.
func (c *Client) ReceiveReorderBaseNavStates() goa.Endpoint {
	var (
		encodeRequest  = EncodeReceiveReorderBaseNavStatesRequest(c.encoder)
		decodeResponse = DecodeReceiveReorderBaseNavStatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReceiveReorderBaseNavStatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReceiveReorderBaseNavStatesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "receiveReorderBaseNavStates", err)
		}
		return decodeResponse(resp)
	}
}

// ReorderBaseNavStates returns an endpoint that makes HTTP requests to the
// Base service ReorderBaseNavStates server.
func (c *Client) ReorderBaseNavStates() goa.Endpoint {
	var (
		encodeRequest  = EncodeReorderBaseNavStatesRequest(c.encoder)
		decodeResponse = DecodeReorderBaseNavStatesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReorderBaseNavStatesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReorderBaseNavStatesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Base", "ReorderBaseNavStates", err)
		}
		return decodeResponse(resp)
	}
}
