// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Base HTTP client types
//
// Command:
// $ goa gen mai.today/api/design

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	base "mai.today/api/gen/base"
)

// CreateBaseRequestBody is the type of the "Base" service "CreateBase"
// endpoint HTTP request body.
type CreateBaseRequestBody struct {
	// 主題颜色
	Color string `form:"color" json:"color" xml:"color"`
	// 順序
	Index int `form:"index" json:"index" xml:"index"`
	// 標識圖片的 URL
	Logo string `form:"logo" json:"logo" xml:"logo"`
	// 名稱
	Name string `form:"name" json:"name" xml:"name"`
}

// UpdateBaseInfoRequestBody is the type of the "Base" service "UpdateBaseInfo"
// endpoint HTTP request body.
type UpdateBaseInfoRequestBody struct {
	// 主題颜色
	Color string `form:"color" json:"color" xml:"color"`
	// 標識圖片的 URL
	Logo string `form:"logo" json:"logo" xml:"logo"`
	// 名稱
	Name string `form:"name" json:"name" xml:"name"`
}

// ReorderBaseNavStatesRequestBody is the type of the "Base" service
// "ReorderBaseNavStates" endpoint HTTP request body.
type ReorderBaseNavStatesRequestBody struct {
	// 識別碼
	ID string `form:"id" json:"id" xml:"id"`
	// 新的順序
	NewIndex int `form:"newIndex" json:"newIndex" xml:"newIndex"`
}

// CreateBaseOKResponseBody is the type of the "Base" service "CreateBase"
// endpoint HTTP response body.
type CreateBaseOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data *CreateBaseResultDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// DeleteBaseOKResponseBody is the type of the "Base" service "DeleteBase"
// endpoint HTTP response body.
type DeleteBaseOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data *DeleteBaseResultDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UpdateBaseInfoOKResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body.
type UpdateBaseInfoOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data *BaseInfoResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ReorderBaseNavStatesOKResponseBody is the type of the "Base" service
// "ReorderBaseNavStates" endpoint HTTP response body.
type ReorderBaseNavStatesOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data []*BaseNavStateResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// CreateBaseInvalidTokenResponseBody is the type of the "Base" service
// "CreateBase" endpoint HTTP response body for the "invalid token" error.
type CreateBaseInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBaseInvalidTokenResponseBody is the type of the "Base" service
// "DeleteBase" endpoint HTTP response body for the "invalid token" error.
type DeleteBaseInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBaseNotFoundResponseBody is the type of the "Base" service
// "DeleteBase" endpoint HTTP response body for the "not found" error.
type DeleteBaseNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBasePermissionDeniedResponseBody is the type of the "Base" service
// "DeleteBase" endpoint HTTP response body for the "permission denied" error.
type DeleteBasePermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBaseInfoInvalidTokenResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body for the "invalid token" error.
type UpdateBaseInfoInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBaseInfoNotFoundResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body for the "not found" error.
type UpdateBaseInfoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBaseInfoPermissionDeniedResponseBody is the type of the "Base" service
// "UpdateBaseInfo" endpoint HTTP response body for the "permission denied"
// error.
type UpdateBaseInfoPermissionDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReorderBaseNavStatesInvalidTokenResponseBody is the type of the "Base"
// service "ReorderBaseNavStates" endpoint HTTP response body for the "invalid
// token" error.
type ReorderBaseNavStatesInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReceiveCreateBaseOKResponseBody is used to define fields on response body
// types.
type ReceiveCreateBaseOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data *CreateBaseResultDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// CommandResponseBody is used to define fields on response body types.
type CommandResponseBody struct {
	// 類型
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// CreateBaseResultDataResponseBody is used to define fields on response body
// types.
type CreateBaseResultDataResponseBody struct {
	// 識別碼
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 基地資訊
	Info *BaseInfoResponseBody `form:"info,omitempty" json:"info,omitempty" xml:"info,omitempty"`
	// 基地導覽列狀態
	NavState *BaseNavStateResponseBody `form:"navState,omitempty" json:"navState,omitempty" xml:"navState,omitempty"`
}

// BaseInfoResponseBody is used to define fields on response body types.
type BaseInfoResponseBody struct {
	// 識別碼
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 基地識別碼
	BaseID *string `form:"baseId,omitempty" json:"baseId,omitempty" xml:"baseId,omitempty"`
	// 主題颜色
	Color *string `form:"color,omitempty" json:"color,omitempty" xml:"color,omitempty"`
	// 標識圖片的 URL
	Logo *string `form:"logo,omitempty" json:"logo,omitempty" xml:"logo,omitempty"`
	// 名稱
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 刪除時間
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// BaseNavStateResponseBody is used to define fields on response body types.
type BaseNavStateResponseBody struct {
	// 識別碼
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 基地識別碼
	BaseID *string `form:"baseId,omitempty" json:"baseId,omitempty" xml:"baseId,omitempty"`
	// 順序
	Index *int `form:"index,omitempty" json:"index,omitempty" xml:"index,omitempty"`
	// 刪除時間
	DeletedAt *string `form:"deleted_at,omitempty" json:"deleted_at,omitempty" xml:"deleted_at,omitempty"`
}

// ReceiveDeleteBaseOKResponseBody is used to define fields on response body
// types.
type ReceiveDeleteBaseOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data *DeleteBaseResultDataResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// DeleteBaseResultDataResponseBody is used to define fields on response body
// types.
type DeleteBaseResultDataResponseBody struct {
	// 基地識別碼
	BaseID *string `form:"baseId,omitempty" json:"baseId,omitempty" xml:"baseId,omitempty"`
}

// ReceiveUpdateBaseInfoOKResponseBody is used to define fields on response
// body types.
type ReceiveUpdateBaseInfoOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data *BaseInfoResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ReceiveReorderBaseNavStatesOKResponseBody is used to define fields on
// response body types.
type ReceiveReorderBaseNavStatesOKResponseBody struct {
	Command *CommandResponseBody `form:"command,omitempty" json:"command,omitempty" xml:"command,omitempty"`
	// 時間戳記
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// 資料
	Data []*BaseNavStateResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// NewCreateBaseRequestBody builds the HTTP request body from the payload of
// the "CreateBase" endpoint of the "Base" service.
func NewCreateBaseRequestBody(p *base.CreateBasePayload) *CreateBaseRequestBody {
	body := &CreateBaseRequestBody{
		Color: p.Color,
		Index: p.Index,
		Logo:  p.Logo,
		Name:  p.Name,
	}
	{
		var zero int
		if body.Index == zero {
			body.Index = 1
		}
	}
	return body
}

// NewUpdateBaseInfoRequestBody builds the HTTP request body from the payload
// of the "UpdateBaseInfo" endpoint of the "Base" service.
func NewUpdateBaseInfoRequestBody(p *base.UpdateBaseInfoPayload) *UpdateBaseInfoRequestBody {
	body := &UpdateBaseInfoRequestBody{
		Color: p.Color,
		Logo:  p.Logo,
		Name:  p.Name,
	}
	return body
}

// NewReorderBaseNavStatesRequestBody builds the HTTP request body from the
// payload of the "ReorderBaseNavStates" endpoint of the "Base" service.
func NewReorderBaseNavStatesRequestBody(p *base.ReorderBaseNavStatesPayload) *ReorderBaseNavStatesRequestBody {
	body := &ReorderBaseNavStatesRequestBody{
		ID:       p.ID,
		NewIndex: p.NewIndex,
	}
	return body
}

// NewReceiveCreateBaseCreateBaseResultSwitchingProtocols builds a "Base"
// service "receiveCreateBase" endpoint result from a HTTP "SwitchingProtocols"
// response.
func NewReceiveCreateBaseCreateBaseResultSwitchingProtocols() *base.CreateBaseResult {
	v := &base.CreateBaseResult{}

	return v
}

// NewCreateBaseResultOK builds a "Base" service "CreateBase" endpoint result
// from a HTTP "OK" response.
func NewCreateBaseResultOK(body *CreateBaseOKResponseBody) *base.CreateBaseResult {
	v := &base.CreateBaseResult{
		Timestamp: *body.Timestamp,
	}
	v.Command = unmarshalCommandResponseBodyToBaseCommand(body.Command)
	v.Data = unmarshalCreateBaseResultDataResponseBodyToBaseCreateBaseResultData(body.Data)

	return v
}

// NewCreateBaseInvalidToken builds a Base service CreateBase endpoint invalid
// token error.
func NewCreateBaseInvalidToken(body *CreateBaseInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReceiveDeleteBaseDeleteBaseResultSwitchingProtocols builds a "Base"
// service "receiveDeleteBase" endpoint result from a HTTP "SwitchingProtocols"
// response.
func NewReceiveDeleteBaseDeleteBaseResultSwitchingProtocols() *base.DeleteBaseResult {
	v := &base.DeleteBaseResult{}

	return v
}

// NewDeleteBaseResultOK builds a "Base" service "DeleteBase" endpoint result
// from a HTTP "OK" response.
func NewDeleteBaseResultOK(body *DeleteBaseOKResponseBody) *base.DeleteBaseResult {
	v := &base.DeleteBaseResult{
		Timestamp: *body.Timestamp,
	}
	v.Command = unmarshalCommandResponseBodyToBaseCommand(body.Command)
	v.Data = unmarshalDeleteBaseResultDataResponseBodyToBaseDeleteBaseResultData(body.Data)

	return v
}

// NewDeleteBaseInvalidToken builds a Base service DeleteBase endpoint invalid
// token error.
func NewDeleteBaseInvalidToken(body *DeleteBaseInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteBaseNotFound builds a Base service DeleteBase endpoint not found
// error.
func NewDeleteBaseNotFound(body *DeleteBaseNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteBasePermissionDenied builds a Base service DeleteBase endpoint
// permission denied error.
func NewDeleteBasePermissionDenied(body *DeleteBasePermissionDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReceiveUpdateBaseInfoUpdateBaseInfoResultSwitchingProtocols builds a
// "Base" service "receiveUpdateBaseInfo" endpoint result from a HTTP
// "SwitchingProtocols" response.
func NewReceiveUpdateBaseInfoUpdateBaseInfoResultSwitchingProtocols() *base.UpdateBaseInfoResult {
	v := &base.UpdateBaseInfoResult{}

	return v
}

// NewUpdateBaseInfoResultOK builds a "Base" service "UpdateBaseInfo" endpoint
// result from a HTTP "OK" response.
func NewUpdateBaseInfoResultOK(body *UpdateBaseInfoOKResponseBody) *base.UpdateBaseInfoResult {
	v := &base.UpdateBaseInfoResult{
		Timestamp: *body.Timestamp,
	}
	v.Command = unmarshalCommandResponseBodyToBaseCommand(body.Command)
	v.Data = unmarshalBaseInfoResponseBodyToBaseBaseInfo(body.Data)

	return v
}

// NewUpdateBaseInfoInvalidToken builds a Base service UpdateBaseInfo endpoint
// invalid token error.
func NewUpdateBaseInfoInvalidToken(body *UpdateBaseInfoInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBaseInfoNotFound builds a Base service UpdateBaseInfo endpoint not
// found error.
func NewUpdateBaseInfoNotFound(body *UpdateBaseInfoNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBaseInfoPermissionDenied builds a Base service UpdateBaseInfo
// endpoint permission denied error.
func NewUpdateBaseInfoPermissionDenied(body *UpdateBaseInfoPermissionDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReceiveReorderBaseNavStatesReorderBaseNavStateResultSwitchingProtocols
// builds a "Base" service "receiveReorderBaseNavStates" endpoint result from a
// HTTP "SwitchingProtocols" response.
func NewReceiveReorderBaseNavStatesReorderBaseNavStateResultSwitchingProtocols() *base.ReorderBaseNavStateResult {
	v := &base.ReorderBaseNavStateResult{}

	return v
}

// NewReorderBaseNavStatesReorderBaseNavStateResultOK builds a "Base" service
// "ReorderBaseNavStates" endpoint result from a HTTP "OK" response.
func NewReorderBaseNavStatesReorderBaseNavStateResultOK(body *ReorderBaseNavStatesOKResponseBody) *base.ReorderBaseNavStateResult {
	v := &base.ReorderBaseNavStateResult{
		Timestamp: *body.Timestamp,
	}
	v.Command = unmarshalCommandResponseBodyToBaseCommand(body.Command)
	v.Data = make([]*base.BaseNavState, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalBaseNavStateResponseBodyToBaseBaseNavState(val)
	}

	return v
}

// NewReorderBaseNavStatesInvalidToken builds a Base service
// ReorderBaseNavStates endpoint invalid token error.
func NewReorderBaseNavStatesInvalidToken(body *ReorderBaseNavStatesInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateBaseOKResponseBody runs the validations defined on
// CreateBaseOKResponseBody
func ValidateCreateBaseOKResponseBody(body *CreateBaseOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	if body.Data != nil {
		if err2 := ValidateCreateBaseResultDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDeleteBaseOKResponseBody runs the validations defined on
// DeleteBaseOKResponseBody
func ValidateDeleteBaseOKResponseBody(body *DeleteBaseOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	if body.Data != nil {
		if err2 := ValidateDeleteBaseResultDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateBaseInfoOKResponseBody runs the validations defined on
// UpdateBaseInfoOKResponseBody
func ValidateUpdateBaseInfoOKResponseBody(body *UpdateBaseInfoOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	if body.Data != nil {
		if err2 := ValidateBaseInfoResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateReorderBaseNavStatesOKResponseBody runs the validations defined on
// ReorderBaseNavStatesOKResponseBody
func ValidateReorderBaseNavStatesOKResponseBody(body *ReorderBaseNavStatesOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateBaseNavStateResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateBaseInvalidTokenResponseBody runs the validations defined on
// CreateBase_invalid token_Response_Body
func ValidateCreateBaseInvalidTokenResponseBody(body *CreateBaseInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBaseInvalidTokenResponseBody runs the validations defined on
// DeleteBase_invalid token_Response_Body
func ValidateDeleteBaseInvalidTokenResponseBody(body *DeleteBaseInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBaseNotFoundResponseBody runs the validations defined on
// DeleteBase_not found_Response_Body
func ValidateDeleteBaseNotFoundResponseBody(body *DeleteBaseNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBasePermissionDeniedResponseBody runs the validations defined
// on DeleteBase_permission denied_Response_Body
func ValidateDeleteBasePermissionDeniedResponseBody(body *DeleteBasePermissionDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBaseInfoInvalidTokenResponseBody runs the validations defined
// on UpdateBaseInfo_invalid token_Response_Body
func ValidateUpdateBaseInfoInvalidTokenResponseBody(body *UpdateBaseInfoInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBaseInfoNotFoundResponseBody runs the validations defined on
// UpdateBaseInfo_not found_Response_Body
func ValidateUpdateBaseInfoNotFoundResponseBody(body *UpdateBaseInfoNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBaseInfoPermissionDeniedResponseBody runs the validations
// defined on UpdateBaseInfo_permission denied_Response_Body
func ValidateUpdateBaseInfoPermissionDeniedResponseBody(body *UpdateBaseInfoPermissionDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReorderBaseNavStatesInvalidTokenResponseBody runs the validations
// defined on ReorderBaseNavStates_invalid token_Response_Body
func ValidateReorderBaseNavStatesInvalidTokenResponseBody(body *ReorderBaseNavStatesInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReceiveCreateBaseOKResponseBody runs the validations defined on
// ReceiveCreateBaseOKResponseBody
func ValidateReceiveCreateBaseOKResponseBody(body *ReceiveCreateBaseOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	if body.Data != nil {
		if err2 := ValidateCreateBaseResultDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCommandResponseBody runs the validations defined on
// CommandResponseBody
func ValidateCommandResponseBody(body *CommandResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == "sync" || *body.Type == "createBase" || *body.Type == "deleteBase" || *body.Type == "reorderBaseNavState" || *body.Type == "updateBaseInfo") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"sync", "createBase", "deleteBase", "reorderBaseNavState", "updateBaseInfo"}))
		}
	}
	return
}

// ValidateCreateBaseResultDataResponseBody runs the validations defined on
// CreateBaseResultDataResponseBody
func ValidateCreateBaseResultDataResponseBody(body *CreateBaseResultDataResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Info == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("info", "body"))
	}
	if body.NavState == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("navState", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, false))
		}
	}
	if body.Info != nil {
		if err2 := ValidateBaseInfoResponseBody(body.Info); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.NavState != nil {
		if err2 := ValidateBaseNavStateResponseBody(body.NavState); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBaseInfoResponseBody runs the validations defined on
// BaseInfoResponseBody
func ValidateBaseInfoResponseBody(body *BaseInfoResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.BaseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("baseId", "body"))
	}
	if body.Color == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("color", "body"))
	}
	if body.Logo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("logo", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, false))
		}
	}
	if body.BaseID != nil {
		if utf8.RuneCountInString(*body.BaseID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.baseId", *body.BaseID, utf8.RuneCountInString(*body.BaseID), 24, true))
		}
	}
	if body.BaseID != nil {
		if utf8.RuneCountInString(*body.BaseID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.baseId", *body.BaseID, utf8.RuneCountInString(*body.BaseID), 24, false))
		}
	}
	if body.Color != nil {
		if utf8.RuneCountInString(*body.Color) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.color", *body.Color, utf8.RuneCountInString(*body.Color), 1, true))
		}
	}
	if body.Color != nil {
		if utf8.RuneCountInString(*body.Color) > 16 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.color", *body.Color, utf8.RuneCountInString(*body.Color), 16, false))
		}
	}
	if body.Logo != nil {
		if utf8.RuneCountInString(*body.Logo) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.logo", *body.Logo, utf8.RuneCountInString(*body.Logo), 1, true))
		}
	}
	if body.Logo != nil {
		if utf8.RuneCountInString(*body.Logo) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.logo", *body.Logo, utf8.RuneCountInString(*body.Logo), 1024, false))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 128, false))
		}
	}
	if body.DeletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.deleted_at", *body.DeletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateBaseNavStateResponseBody runs the validations defined on
// BaseNavStateResponseBody
func ValidateBaseNavStateResponseBody(body *BaseNavStateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.BaseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("baseId", "body"))
	}
	if body.Index == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("index", "body"))
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, true))
		}
	}
	if body.ID != nil {
		if utf8.RuneCountInString(*body.ID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.id", *body.ID, utf8.RuneCountInString(*body.ID), 24, false))
		}
	}
	if body.BaseID != nil {
		if utf8.RuneCountInString(*body.BaseID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.baseId", *body.BaseID, utf8.RuneCountInString(*body.BaseID), 24, true))
		}
	}
	if body.BaseID != nil {
		if utf8.RuneCountInString(*body.BaseID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.baseId", *body.BaseID, utf8.RuneCountInString(*body.BaseID), 24, false))
		}
	}
	if body.Index != nil {
		if *body.Index < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.index", *body.Index, 1, true))
		}
	}
	if body.DeletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.deleted_at", *body.DeletedAt, goa.FormatDateTime))
	}
	return
}

// ValidateReceiveDeleteBaseOKResponseBody runs the validations defined on
// ReceiveDeleteBaseOKResponseBody
func ValidateReceiveDeleteBaseOKResponseBody(body *ReceiveDeleteBaseOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	if body.Data != nil {
		if err2 := ValidateDeleteBaseResultDataResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDeleteBaseResultDataResponseBody runs the validations defined on
// DeleteBaseResultDataResponseBody
func ValidateDeleteBaseResultDataResponseBody(body *DeleteBaseResultDataResponseBody) (err error) {
	if body.BaseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("baseId", "body"))
	}
	if body.BaseID != nil {
		if utf8.RuneCountInString(*body.BaseID) < 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.baseId", *body.BaseID, utf8.RuneCountInString(*body.BaseID), 24, true))
		}
	}
	if body.BaseID != nil {
		if utf8.RuneCountInString(*body.BaseID) > 24 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.baseId", *body.BaseID, utf8.RuneCountInString(*body.BaseID), 24, false))
		}
	}
	return
}

// ValidateReceiveUpdateBaseInfoOKResponseBody runs the validations defined on
// ReceiveUpdateBaseInfoOKResponseBody
func ValidateReceiveUpdateBaseInfoOKResponseBody(body *ReceiveUpdateBaseInfoOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	if body.Data != nil {
		if err2 := ValidateBaseInfoResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateReceiveReorderBaseNavStatesOKResponseBody runs the validations
// defined on ReceiveReorderBaseNavStatesOKResponseBody
func ValidateReceiveReorderBaseNavStatesOKResponseBody(body *ReceiveReorderBaseNavStatesOKResponseBody) (err error) {
	if body.Command == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("command", "body"))
	}
	if body.Timestamp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timestamp", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Command != nil {
		if err2 := ValidateCommandResponseBody(body.Command); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Timestamp != nil {
		if *body.Timestamp < 1.719188007e+18 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.timestamp", *body.Timestamp, 1.719188007e+18, true))
		}
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateBaseNavStateResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
