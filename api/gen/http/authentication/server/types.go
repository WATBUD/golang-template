// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Authentication HTTP server types
//
// Command:
// $ goa gen mai.today/api/design

package server

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	authentication "mai.today/api/gen/authentication"
)

// SignInRequestBody is the type of the "Authentication" service "SignIn"
// endpoint HTTP request body.
type SignInRequestBody struct {
	// Firebase Id Token
	FirebaseIDToken *string `form:"firebaseIdToken,omitempty" json:"firebaseIdToken,omitempty" xml:"firebaseIdToken,omitempty"`
}

// SignInTokenErrorResponseBody is the type of the "Authentication" service
// "SignIn" endpoint HTTP response body for the "token_error" error.
type SignInTokenErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewSignInTokenErrorResponseBody builds the HTTP response body from the
// result of the "SignIn" endpoint of the "Authentication" service.
func NewSignInTokenErrorResponseBody(res *goa.ServiceError) *SignInTokenErrorResponseBody {
	body := &SignInTokenErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInPayload builds a Authentication service SignIn endpoint payload.
func NewSignInPayload(body *SignInRequestBody) *authentication.SignInPayload {
	v := &authentication.SignInPayload{
		FirebaseIDToken: *body.FirebaseIDToken,
	}

	return v
}

// ValidateSignInRequestBody runs the validations defined on SignInRequestBody
func ValidateSignInRequestBody(body *SignInRequestBody) (err error) {
	if body.FirebaseIDToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firebaseIdToken", "body"))
	}
	if body.FirebaseIDToken != nil {
		if utf8.RuneCountInString(*body.FirebaseIDToken) < 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firebaseIdToken", *body.FirebaseIDToken, utf8.RuneCountInString(*body.FirebaseIDToken), 100, true))
		}
	}
	return
}
