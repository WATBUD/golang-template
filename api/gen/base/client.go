// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Base client
//
// Command:
// $ goa gen mai.today/api/design

package base

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Base" service client.
type Client struct {
	ReceiveCreateBaseEndpoint           goa.Endpoint
	CreateBaseEndpoint                  goa.Endpoint
	ReceiveDeleteBaseEndpoint           goa.Endpoint
	DeleteBaseEndpoint                  goa.Endpoint
	ReceiveUpdateBaseInfoEndpoint       goa.Endpoint
	UpdateBaseInfoEndpoint              goa.Endpoint
	ReceiveReorderBaseNavStatesEndpoint goa.Endpoint
	ReorderBaseNavStatesEndpoint        goa.Endpoint
}

// NewClient initializes a "Base" service client given the endpoints.
func NewClient(receiveCreateBase, createBase, receiveDeleteBase, deleteBase, receiveUpdateBaseInfo, updateBaseInfo, receiveReorderBaseNavStates, reorderBaseNavStates goa.Endpoint) *Client {
	return &Client{
		ReceiveCreateBaseEndpoint:           receiveCreateBase,
		CreateBaseEndpoint:                  createBase,
		ReceiveDeleteBaseEndpoint:           receiveDeleteBase,
		DeleteBaseEndpoint:                  deleteBase,
		ReceiveUpdateBaseInfoEndpoint:       receiveUpdateBaseInfo,
		UpdateBaseInfoEndpoint:              updateBaseInfo,
		ReceiveReorderBaseNavStatesEndpoint: receiveReorderBaseNavStates,
		ReorderBaseNavStatesEndpoint:        reorderBaseNavStates,
	}
}

// ReceiveCreateBase calls the "receiveCreateBase" endpoint of the "Base"
// service.
// ReceiveCreateBase may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) ReceiveCreateBase(ctx context.Context, p *ReceiveCreateBasePayload) (res *CreateBaseResult, err error) {
	var ires any
	ires, err = c.ReceiveCreateBaseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateBaseResult), nil
}

// CreateBase calls the "CreateBase" endpoint of the "Base" service.
// CreateBase may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) CreateBase(ctx context.Context, p *CreateBasePayload) (res *CreateBaseResult, err error) {
	var ires any
	ires, err = c.CreateBaseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*CreateBaseResult), nil
}

// ReceiveDeleteBase calls the "receiveDeleteBase" endpoint of the "Base"
// service.
// ReceiveDeleteBase may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) ReceiveDeleteBase(ctx context.Context, p *ReceiveDeleteBasePayload) (res *DeleteBaseResult, err error) {
	var ires any
	ires, err = c.ReceiveDeleteBaseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DeleteBaseResult), nil
}

// DeleteBase calls the "DeleteBase" endpoint of the "Base" service.
// DeleteBase may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) DeleteBase(ctx context.Context, p *DeleteBasePayload) (res *DeleteBaseResult, err error) {
	var ires any
	ires, err = c.DeleteBaseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DeleteBaseResult), nil
}

// ReceiveUpdateBaseInfo calls the "receiveUpdateBaseInfo" endpoint of the
// "Base" service.
// ReceiveUpdateBaseInfo may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) ReceiveUpdateBaseInfo(ctx context.Context, p *ReceiveUpdateBaseInfoPayload) (res *UpdateBaseInfoResult, err error) {
	var ires any
	ires, err = c.ReceiveUpdateBaseInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateBaseInfoResult), nil
}

// UpdateBaseInfo calls the "UpdateBaseInfo" endpoint of the "Base" service.
// UpdateBaseInfo may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) UpdateBaseInfo(ctx context.Context, p *UpdateBaseInfoPayload) (res *UpdateBaseInfoResult, err error) {
	var ires any
	ires, err = c.UpdateBaseInfoEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateBaseInfoResult), nil
}

// ReceiveReorderBaseNavStates calls the "receiveReorderBaseNavStates" endpoint
// of the "Base" service.
// ReceiveReorderBaseNavStates may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) ReceiveReorderBaseNavStates(ctx context.Context, p *ReceiveReorderBaseNavStatesPayload) (res *ReorderBaseNavStateResult, err error) {
	var ires any
	ires, err = c.ReceiveReorderBaseNavStatesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ReorderBaseNavStateResult), nil
}

// ReorderBaseNavStates calls the "ReorderBaseNavStates" endpoint of the "Base"
// service.
// ReorderBaseNavStates may return the following errors:
//   - "invalid token" (type *goa.ServiceError): token 無效
//   - "not found" (type *goa.ServiceError): 資源不存在
//   - "permission denied" (type *goa.ServiceError): 沒有權限
//   - error: internal error
func (c *Client) ReorderBaseNavStates(ctx context.Context, p *ReorderBaseNavStatesPayload) (res *ReorderBaseNavStateResult, err error) {
	var ires any
	ires, err = c.ReorderBaseNavStatesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ReorderBaseNavStateResult), nil
}
