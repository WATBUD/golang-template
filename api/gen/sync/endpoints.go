// Code generated by goa v3.16.2, DO NOT EDIT.
//
// Sync endpoints
//
// Command:
// $ goa gen mai.today/api/design

package sync

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "Sync" service endpoints.
type Endpoints struct {
	ReceiveSync goa.Endpoint
	Sync        goa.Endpoint
}

// NewEndpoints wraps the methods of the "Sync" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ReceiveSync: NewReceiveSyncEndpoint(s, a.JWTAuth),
		Sync:        NewSyncEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "Sync" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ReceiveSync = m(e.ReceiveSync)
	e.Sync = m(e.Sync)
}

// NewReceiveSyncEndpoint returns an endpoint function that calls the method
// "receiveSync" of service "Sync".
func NewReceiveSyncEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReceiveSyncPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ReceiveSync(ctx, p)
	}
}

// NewSyncEndpoint returns an endpoint function that calls the method "sync" of
// service "Sync".
func NewSyncEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SyncPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Sync(ctx, p)
	}
}
