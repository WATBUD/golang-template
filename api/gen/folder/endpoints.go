// Code generated by goa v3.16.2, DO NOT EDIT.
//
// folder endpoints
//
// Command:
// $ goa gen mai.today/api/design

package folder

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "folder" service endpoints.
type Endpoints struct {
	ReceiveCreateFolder goa.Endpoint
	CreateFolder        goa.Endpoint
	ReceiveDeleteFolder goa.Endpoint
	DeleteFolder        goa.Endpoint
	ReceiveUpdateFolder goa.Endpoint
	UpdateFolder        goa.Endpoint
	ReceiveListFolders  goa.Endpoint
	ListFolders         goa.Endpoint
}

// NewEndpoints wraps the methods of the "folder" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ReceiveCreateFolder: NewReceiveCreateFolderEndpoint(s, a.JWTAuth),
		CreateFolder:        NewCreateFolderEndpoint(s, a.JWTAuth),
		ReceiveDeleteFolder: NewReceiveDeleteFolderEndpoint(s, a.JWTAuth),
		DeleteFolder:        NewDeleteFolderEndpoint(s, a.JWTAuth),
		ReceiveUpdateFolder: NewReceiveUpdateFolderEndpoint(s, a.JWTAuth),
		UpdateFolder:        NewUpdateFolderEndpoint(s, a.JWTAuth),
		ReceiveListFolders:  NewReceiveListFoldersEndpoint(s, a.JWTAuth),
		ListFolders:         NewListFoldersEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "folder" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ReceiveCreateFolder = m(e.ReceiveCreateFolder)
	e.CreateFolder = m(e.CreateFolder)
	e.ReceiveDeleteFolder = m(e.ReceiveDeleteFolder)
	e.DeleteFolder = m(e.DeleteFolder)
	e.ReceiveUpdateFolder = m(e.ReceiveUpdateFolder)
	e.UpdateFolder = m(e.UpdateFolder)
	e.ReceiveListFolders = m(e.ReceiveListFolders)
	e.ListFolders = m(e.ListFolders)
}

// NewReceiveCreateFolderEndpoint returns an endpoint function that calls the
// method "receiveCreateFolder" of service "folder".
func NewReceiveCreateFolderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReceiveCreateFolderPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ReceiveCreateFolder(ctx, p)
	}
}

// NewCreateFolderEndpoint returns an endpoint function that calls the method
// "CreateFolder" of service "folder".
func NewCreateFolderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateFolderPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateFolder(ctx, p)
	}
}

// NewReceiveDeleteFolderEndpoint returns an endpoint function that calls the
// method "receiveDeleteFolder" of service "folder".
func NewReceiveDeleteFolderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReceiveDeleteFolderPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ReceiveDeleteFolder(ctx, p)
	}
}

// NewDeleteFolderEndpoint returns an endpoint function that calls the method
// "DeleteFolder" of service "folder".
func NewDeleteFolderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteFolderPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.DeleteFolder(ctx, p)
	}
}

// NewReceiveUpdateFolderEndpoint returns an endpoint function that calls the
// method "receiveUpdateFolder" of service "folder".
func NewReceiveUpdateFolderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReceiveUpdateFolderPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ReceiveUpdateFolder(ctx, p)
	}
}

// NewUpdateFolderEndpoint returns an endpoint function that calls the method
// "UpdateFolder" of service "folder".
func NewUpdateFolderEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateFolderPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateFolder(ctx, p)
	}
}

// NewReceiveListFoldersEndpoint returns an endpoint function that calls the
// method "receiveListFolders" of service "folder".
func NewReceiveListFoldersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReceiveListFoldersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ReceiveListFolders(ctx, p)
	}
}

// NewListFoldersEndpoint returns an endpoint function that calls the method
// "ListFolders" of service "folder".
func NewListFoldersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListFoldersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "JWT",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.JWT != nil {
			token = *p.JWT
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListFolders(ctx, p)
	}
}
