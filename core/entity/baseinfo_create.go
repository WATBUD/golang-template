// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mai.today/core/entity/baseinfo"
)

// BaseInfoCreate is the builder for creating a BaseInfo entity.
type BaseInfoCreate struct {
	config
	mutation *BaseInfoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bic *BaseInfoCreate) SetCreatedAt(t time.Time) *BaseInfoCreate {
	bic.mutation.SetCreatedAt(t)
	return bic
}

// SetDeletedAt sets the "deleted_at" field.
func (bic *BaseInfoCreate) SetDeletedAt(t time.Time) *BaseInfoCreate {
	bic.mutation.SetDeletedAt(t)
	return bic
}

// SetUpdatedAt sets the "updated_at" field.
func (bic *BaseInfoCreate) SetUpdatedAt(t time.Time) *BaseInfoCreate {
	bic.mutation.SetUpdatedAt(t)
	return bic
}

// SetBaseID sets the "base_id" field.
func (bic *BaseInfoCreate) SetBaseID(s string) *BaseInfoCreate {
	bic.mutation.SetBaseID(s)
	return bic
}

// SetName sets the "name" field.
func (bic *BaseInfoCreate) SetName(s string) *BaseInfoCreate {
	bic.mutation.SetName(s)
	return bic
}

// SetLogo sets the "logo" field.
func (bic *BaseInfoCreate) SetLogo(s string) *BaseInfoCreate {
	bic.mutation.SetLogo(s)
	return bic
}

// SetColor sets the "color" field.
func (bic *BaseInfoCreate) SetColor(s string) *BaseInfoCreate {
	bic.mutation.SetColor(s)
	return bic
}

// SetID sets the "id" field.
func (bic *BaseInfoCreate) SetID(s string) *BaseInfoCreate {
	bic.mutation.SetID(s)
	return bic
}

// Mutation returns the BaseInfoMutation object of the builder.
func (bic *BaseInfoCreate) Mutation() *BaseInfoMutation {
	return bic.mutation
}

// Save creates the BaseInfo in the database.
func (bic *BaseInfoCreate) Save(ctx context.Context) (*BaseInfo, error) {
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BaseInfoCreate) SaveX(ctx context.Context) *BaseInfo {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BaseInfoCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BaseInfoCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BaseInfoCreate) check() error {
	if _, ok := bic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entity: missing required field "BaseInfo.created_at"`)}
	}
	if _, ok := bic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`entity: missing required field "BaseInfo.deleted_at"`)}
	}
	if _, ok := bic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entity: missing required field "BaseInfo.updated_at"`)}
	}
	if _, ok := bic.mutation.BaseID(); !ok {
		return &ValidationError{Name: "base_id", err: errors.New(`entity: missing required field "BaseInfo.base_id"`)}
	}
	if _, ok := bic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entity: missing required field "BaseInfo.name"`)}
	}
	if _, ok := bic.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`entity: missing required field "BaseInfo.logo"`)}
	}
	if _, ok := bic.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`entity: missing required field "BaseInfo.color"`)}
	}
	return nil
}

func (bic *BaseInfoCreate) sqlSave(ctx context.Context) (*BaseInfo, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BaseInfo.ID type: %T", _spec.ID.Value)
		}
	}
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BaseInfoCreate) createSpec() (*BaseInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &BaseInfo{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(baseinfo.Table, sqlgraph.NewFieldSpec(baseinfo.FieldID, field.TypeString))
	)
	if id, ok := bic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bic.mutation.CreatedAt(); ok {
		_spec.SetField(baseinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bic.mutation.DeletedAt(); ok {
		_spec.SetField(baseinfo.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bic.mutation.UpdatedAt(); ok {
		_spec.SetField(baseinfo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bic.mutation.BaseID(); ok {
		_spec.SetField(baseinfo.FieldBaseID, field.TypeString, value)
		_node.BaseID = value
	}
	if value, ok := bic.mutation.Name(); ok {
		_spec.SetField(baseinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bic.mutation.Logo(); ok {
		_spec.SetField(baseinfo.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := bic.mutation.Color(); ok {
		_spec.SetField(baseinfo.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	return _node, _spec
}

// BaseInfoCreateBulk is the builder for creating many BaseInfo entities in bulk.
type BaseInfoCreateBulk struct {
	config
	err      error
	builders []*BaseInfoCreate
}

// Save creates the BaseInfo entities in the database.
func (bicb *BaseInfoCreateBulk) Save(ctx context.Context) ([]*BaseInfo, error) {
	if bicb.err != nil {
		return nil, bicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BaseInfo, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BaseInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BaseInfoCreateBulk) SaveX(ctx context.Context) []*BaseInfo {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BaseInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BaseInfoCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}
