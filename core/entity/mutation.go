// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"mai.today/core/entity/base"
	"mai.today/core/entity/baseinfo"
	"mai.today/core/entity/basemember"
	"mai.today/core/entity/basenavstate"
	"mai.today/core/entity/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBase         = "Base"
	TypeBaseInfo     = "BaseInfo"
	TypeBaseMember   = "BaseMember"
	TypeBaseNavState = "BaseNavState"
)

// BaseMutation represents an operation that mutates the Base nodes in the graph.
type BaseMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	deleted_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Base, error)
	predicates    []predicate.Base
}

var _ ent.Mutation = (*BaseMutation)(nil)

// baseOption allows management of the mutation configuration using functional options.
type baseOption func(*BaseMutation)

// newBaseMutation creates new mutation for the Base entity.
func newBaseMutation(c config, op Op, opts ...baseOption) *BaseMutation {
	m := &BaseMutation{
		config:        c,
		op:            op,
		typ:           TypeBase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBaseID sets the ID field of the mutation.
func withBaseID(id string) baseOption {
	return func(m *BaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Base
		)
		m.oldValue = func(ctx context.Context) (*Base, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Base.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBase sets the old Base of the mutation.
func withBase(node *Base) baseOption {
	return func(m *BaseMutation) {
		m.oldValue = func(context.Context) (*Base, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Base entities.
func (m *BaseMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BaseMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BaseMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Base.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BaseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BaseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Base entity.
// If the Base object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BaseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BaseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BaseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Base entity.
// If the Base object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BaseMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BaseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BaseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Base entity.
// If the Base object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BaseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the BaseMutation builder.
func (m *BaseMutation) Where(ps ...predicate.Base) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BaseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BaseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Base, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BaseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BaseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Base).
func (m *BaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BaseMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, base.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, base.FieldDeletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, base.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case base.FieldCreatedAt:
		return m.CreatedAt()
	case base.FieldDeletedAt:
		return m.DeletedAt()
	case base.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case base.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case base.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case base.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Base field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case base.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case base.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case base.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Base field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Base numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Base nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BaseMutation) ResetField(name string) error {
	switch name {
	case base.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case base.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case base.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Base field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BaseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BaseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BaseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BaseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Base unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BaseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Base edge %s", name)
}

// BaseInfoMutation represents an operation that mutates the BaseInfo nodes in the graph.
type BaseInfoMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	deleted_at    *time.Time
	updated_at    *time.Time
	base_id       *string
	name          *string
	logo          *string
	color         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BaseInfo, error)
	predicates    []predicate.BaseInfo
}

var _ ent.Mutation = (*BaseInfoMutation)(nil)

// baseinfoOption allows management of the mutation configuration using functional options.
type baseinfoOption func(*BaseInfoMutation)

// newBaseInfoMutation creates new mutation for the BaseInfo entity.
func newBaseInfoMutation(c config, op Op, opts ...baseinfoOption) *BaseInfoMutation {
	m := &BaseInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeBaseInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBaseInfoID sets the ID field of the mutation.
func withBaseInfoID(id string) baseinfoOption {
	return func(m *BaseInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *BaseInfo
		)
		m.oldValue = func(ctx context.Context) (*BaseInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BaseInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBaseInfo sets the old BaseInfo of the mutation.
func withBaseInfo(node *BaseInfo) baseinfoOption {
	return func(m *BaseInfoMutation) {
		m.oldValue = func(context.Context) (*BaseInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BaseInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BaseInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BaseInfo entities.
func (m *BaseInfoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BaseInfoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BaseInfoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BaseInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BaseInfoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BaseInfoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BaseInfoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BaseInfoMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BaseInfoMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BaseInfoMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BaseInfoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BaseInfoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BaseInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBaseID sets the "base_id" field.
func (m *BaseInfoMutation) SetBaseID(s string) {
	m.base_id = &s
}

// BaseID returns the value of the "base_id" field in the mutation.
func (m *BaseInfoMutation) BaseID() (r string, exists bool) {
	v := m.base_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseID returns the old "base_id" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldBaseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseID: %w", err)
	}
	return oldValue.BaseID, nil
}

// ResetBaseID resets all changes to the "base_id" field.
func (m *BaseInfoMutation) ResetBaseID() {
	m.base_id = nil
}

// SetName sets the "name" field.
func (m *BaseInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BaseInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BaseInfoMutation) ResetName() {
	m.name = nil
}

// SetLogo sets the "logo" field.
func (m *BaseInfoMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *BaseInfoMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ResetLogo resets all changes to the "logo" field.
func (m *BaseInfoMutation) ResetLogo() {
	m.logo = nil
}

// SetColor sets the "color" field.
func (m *BaseInfoMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *BaseInfoMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the BaseInfo entity.
// If the BaseInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseInfoMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *BaseInfoMutation) ResetColor() {
	m.color = nil
}

// Where appends a list predicates to the BaseInfoMutation builder.
func (m *BaseInfoMutation) Where(ps ...predicate.BaseInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BaseInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BaseInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BaseInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BaseInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BaseInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BaseInfo).
func (m *BaseInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BaseInfoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, baseinfo.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, baseinfo.FieldDeletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, baseinfo.FieldUpdatedAt)
	}
	if m.base_id != nil {
		fields = append(fields, baseinfo.FieldBaseID)
	}
	if m.name != nil {
		fields = append(fields, baseinfo.FieldName)
	}
	if m.logo != nil {
		fields = append(fields, baseinfo.FieldLogo)
	}
	if m.color != nil {
		fields = append(fields, baseinfo.FieldColor)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BaseInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case baseinfo.FieldCreatedAt:
		return m.CreatedAt()
	case baseinfo.FieldDeletedAt:
		return m.DeletedAt()
	case baseinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case baseinfo.FieldBaseID:
		return m.BaseID()
	case baseinfo.FieldName:
		return m.Name()
	case baseinfo.FieldLogo:
		return m.Logo()
	case baseinfo.FieldColor:
		return m.Color()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BaseInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case baseinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case baseinfo.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case baseinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case baseinfo.FieldBaseID:
		return m.OldBaseID(ctx)
	case baseinfo.FieldName:
		return m.OldName(ctx)
	case baseinfo.FieldLogo:
		return m.OldLogo(ctx)
	case baseinfo.FieldColor:
		return m.OldColor(ctx)
	}
	return nil, fmt.Errorf("unknown BaseInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case baseinfo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case baseinfo.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case baseinfo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case baseinfo.FieldBaseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseID(v)
		return nil
	case baseinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case baseinfo.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case baseinfo.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	}
	return fmt.Errorf("unknown BaseInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BaseInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BaseInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BaseInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BaseInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BaseInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BaseInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BaseInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BaseInfoMutation) ResetField(name string) error {
	switch name {
	case baseinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case baseinfo.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case baseinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case baseinfo.FieldBaseID:
		m.ResetBaseID()
		return nil
	case baseinfo.FieldName:
		m.ResetName()
		return nil
	case baseinfo.FieldLogo:
		m.ResetLogo()
		return nil
	case baseinfo.FieldColor:
		m.ResetColor()
		return nil
	}
	return fmt.Errorf("unknown BaseInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BaseInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BaseInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BaseInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BaseInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BaseInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BaseInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BaseInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BaseInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BaseInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BaseInfo edge %s", name)
}

// BaseMemberMutation represents an operation that mutates the BaseMember nodes in the graph.
type BaseMemberMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	deleted_at    *time.Time
	updated_at    *time.Time
	base_id       *string
	user_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BaseMember, error)
	predicates    []predicate.BaseMember
}

var _ ent.Mutation = (*BaseMemberMutation)(nil)

// basememberOption allows management of the mutation configuration using functional options.
type basememberOption func(*BaseMemberMutation)

// newBaseMemberMutation creates new mutation for the BaseMember entity.
func newBaseMemberMutation(c config, op Op, opts ...basememberOption) *BaseMemberMutation {
	m := &BaseMemberMutation{
		config:        c,
		op:            op,
		typ:           TypeBaseMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBaseMemberID sets the ID field of the mutation.
func withBaseMemberID(id string) basememberOption {
	return func(m *BaseMemberMutation) {
		var (
			err   error
			once  sync.Once
			value *BaseMember
		)
		m.oldValue = func(ctx context.Context) (*BaseMember, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BaseMember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBaseMember sets the old BaseMember of the mutation.
func withBaseMember(node *BaseMember) basememberOption {
	return func(m *BaseMemberMutation) {
		m.oldValue = func(context.Context) (*BaseMember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BaseMemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BaseMemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BaseMember entities.
func (m *BaseMemberMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BaseMemberMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BaseMemberMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BaseMember.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BaseMemberMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BaseMemberMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BaseMember entity.
// If the BaseMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMemberMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BaseMemberMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BaseMemberMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BaseMemberMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the BaseMember entity.
// If the BaseMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMemberMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BaseMemberMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BaseMemberMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BaseMemberMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BaseMember entity.
// If the BaseMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMemberMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BaseMemberMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBaseID sets the "base_id" field.
func (m *BaseMemberMutation) SetBaseID(s string) {
	m.base_id = &s
}

// BaseID returns the value of the "base_id" field in the mutation.
func (m *BaseMemberMutation) BaseID() (r string, exists bool) {
	v := m.base_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseID returns the old "base_id" field's value of the BaseMember entity.
// If the BaseMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMemberMutation) OldBaseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseID: %w", err)
	}
	return oldValue.BaseID, nil
}

// ResetBaseID resets all changes to the "base_id" field.
func (m *BaseMemberMutation) ResetBaseID() {
	m.base_id = nil
}

// SetUserID sets the "user_id" field.
func (m *BaseMemberMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BaseMemberMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the BaseMember entity.
// If the BaseMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseMemberMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BaseMemberMutation) ResetUserID() {
	m.user_id = nil
}

// Where appends a list predicates to the BaseMemberMutation builder.
func (m *BaseMemberMutation) Where(ps ...predicate.BaseMember) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BaseMemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BaseMemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BaseMember, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BaseMemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BaseMemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BaseMember).
func (m *BaseMemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BaseMemberMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, basemember.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, basemember.FieldDeletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, basemember.FieldUpdatedAt)
	}
	if m.base_id != nil {
		fields = append(fields, basemember.FieldBaseID)
	}
	if m.user_id != nil {
		fields = append(fields, basemember.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BaseMemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case basemember.FieldCreatedAt:
		return m.CreatedAt()
	case basemember.FieldDeletedAt:
		return m.DeletedAt()
	case basemember.FieldUpdatedAt:
		return m.UpdatedAt()
	case basemember.FieldBaseID:
		return m.BaseID()
	case basemember.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BaseMemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case basemember.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case basemember.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case basemember.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case basemember.FieldBaseID:
		return m.OldBaseID(ctx)
	case basemember.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown BaseMember field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseMemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case basemember.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case basemember.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case basemember.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case basemember.FieldBaseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseID(v)
		return nil
	case basemember.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown BaseMember field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BaseMemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BaseMemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseMemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BaseMember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BaseMemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BaseMemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BaseMemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BaseMember nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BaseMemberMutation) ResetField(name string) error {
	switch name {
	case basemember.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case basemember.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case basemember.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case basemember.FieldBaseID:
		m.ResetBaseID()
		return nil
	case basemember.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown BaseMember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BaseMemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BaseMemberMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BaseMemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BaseMemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BaseMemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BaseMemberMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BaseMemberMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BaseMember unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BaseMemberMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BaseMember edge %s", name)
}

// BaseNavStateMutation represents an operation that mutates the BaseNavState nodes in the graph.
type BaseNavStateMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	deleted_at    *time.Time
	updated_at    *time.Time
	base_id       *string
	user_id       *string
	index         *int
	addindex      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BaseNavState, error)
	predicates    []predicate.BaseNavState
}

var _ ent.Mutation = (*BaseNavStateMutation)(nil)

// basenavstateOption allows management of the mutation configuration using functional options.
type basenavstateOption func(*BaseNavStateMutation)

// newBaseNavStateMutation creates new mutation for the BaseNavState entity.
func newBaseNavStateMutation(c config, op Op, opts ...basenavstateOption) *BaseNavStateMutation {
	m := &BaseNavStateMutation{
		config:        c,
		op:            op,
		typ:           TypeBaseNavState,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBaseNavStateID sets the ID field of the mutation.
func withBaseNavStateID(id string) basenavstateOption {
	return func(m *BaseNavStateMutation) {
		var (
			err   error
			once  sync.Once
			value *BaseNavState
		)
		m.oldValue = func(ctx context.Context) (*BaseNavState, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BaseNavState.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBaseNavState sets the old BaseNavState of the mutation.
func withBaseNavState(node *BaseNavState) basenavstateOption {
	return func(m *BaseNavStateMutation) {
		m.oldValue = func(context.Context) (*BaseNavState, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BaseNavStateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BaseNavStateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BaseNavState entities.
func (m *BaseNavStateMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BaseNavStateMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BaseNavStateMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BaseNavState.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BaseNavStateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BaseNavStateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BaseNavState entity.
// If the BaseNavState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseNavStateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BaseNavStateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BaseNavStateMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BaseNavStateMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the BaseNavState entity.
// If the BaseNavState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseNavStateMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BaseNavStateMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BaseNavStateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BaseNavStateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BaseNavState entity.
// If the BaseNavState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseNavStateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BaseNavStateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBaseID sets the "base_id" field.
func (m *BaseNavStateMutation) SetBaseID(s string) {
	m.base_id = &s
}

// BaseID returns the value of the "base_id" field in the mutation.
func (m *BaseNavStateMutation) BaseID() (r string, exists bool) {
	v := m.base_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseID returns the old "base_id" field's value of the BaseNavState entity.
// If the BaseNavState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseNavStateMutation) OldBaseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseID: %w", err)
	}
	return oldValue.BaseID, nil
}

// ResetBaseID resets all changes to the "base_id" field.
func (m *BaseNavStateMutation) ResetBaseID() {
	m.base_id = nil
}

// SetUserID sets the "user_id" field.
func (m *BaseNavStateMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BaseNavStateMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the BaseNavState entity.
// If the BaseNavState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseNavStateMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BaseNavStateMutation) ResetUserID() {
	m.user_id = nil
}

// SetIndex sets the "index" field.
func (m *BaseNavStateMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *BaseNavStateMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the BaseNavState entity.
// If the BaseNavState object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseNavStateMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *BaseNavStateMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *BaseNavStateMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *BaseNavStateMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// Where appends a list predicates to the BaseNavStateMutation builder.
func (m *BaseNavStateMutation) Where(ps ...predicate.BaseNavState) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BaseNavStateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BaseNavStateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BaseNavState, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BaseNavStateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BaseNavStateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BaseNavState).
func (m *BaseNavStateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BaseNavStateMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, basenavstate.FieldCreatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, basenavstate.FieldDeletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, basenavstate.FieldUpdatedAt)
	}
	if m.base_id != nil {
		fields = append(fields, basenavstate.FieldBaseID)
	}
	if m.user_id != nil {
		fields = append(fields, basenavstate.FieldUserID)
	}
	if m.index != nil {
		fields = append(fields, basenavstate.FieldIndex)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BaseNavStateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case basenavstate.FieldCreatedAt:
		return m.CreatedAt()
	case basenavstate.FieldDeletedAt:
		return m.DeletedAt()
	case basenavstate.FieldUpdatedAt:
		return m.UpdatedAt()
	case basenavstate.FieldBaseID:
		return m.BaseID()
	case basenavstate.FieldUserID:
		return m.UserID()
	case basenavstate.FieldIndex:
		return m.Index()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BaseNavStateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case basenavstate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case basenavstate.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case basenavstate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case basenavstate.FieldBaseID:
		return m.OldBaseID(ctx)
	case basenavstate.FieldUserID:
		return m.OldUserID(ctx)
	case basenavstate.FieldIndex:
		return m.OldIndex(ctx)
	}
	return nil, fmt.Errorf("unknown BaseNavState field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseNavStateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case basenavstate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case basenavstate.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case basenavstate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case basenavstate.FieldBaseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseID(v)
		return nil
	case basenavstate.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case basenavstate.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	}
	return fmt.Errorf("unknown BaseNavState field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BaseNavStateMutation) AddedFields() []string {
	var fields []string
	if m.addindex != nil {
		fields = append(fields, basenavstate.FieldIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BaseNavStateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case basenavstate.FieldIndex:
		return m.AddedIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseNavStateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case basenavstate.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	}
	return fmt.Errorf("unknown BaseNavState numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BaseNavStateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BaseNavStateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BaseNavStateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BaseNavState nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BaseNavStateMutation) ResetField(name string) error {
	switch name {
	case basenavstate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case basenavstate.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case basenavstate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case basenavstate.FieldBaseID:
		m.ResetBaseID()
		return nil
	case basenavstate.FieldUserID:
		m.ResetUserID()
		return nil
	case basenavstate.FieldIndex:
		m.ResetIndex()
		return nil
	}
	return fmt.Errorf("unknown BaseNavState field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BaseNavStateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BaseNavStateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BaseNavStateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BaseNavStateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BaseNavStateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BaseNavStateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BaseNavStateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BaseNavState unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BaseNavStateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BaseNavState edge %s", name)
}
