// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mai.today/core/entity/baseinfo"
	"mai.today/core/entity/predicate"
)

// BaseInfoUpdate is the builder for updating BaseInfo entities.
type BaseInfoUpdate struct {
	config
	hooks    []Hook
	mutation *BaseInfoMutation
}

// Where appends a list predicates to the BaseInfoUpdate builder.
func (biu *BaseInfoUpdate) Where(ps ...predicate.BaseInfo) *BaseInfoUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetCreatedAt sets the "created_at" field.
func (biu *BaseInfoUpdate) SetCreatedAt(t time.Time) *BaseInfoUpdate {
	biu.mutation.SetCreatedAt(t)
	return biu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableCreatedAt(t *time.Time) *BaseInfoUpdate {
	if t != nil {
		biu.SetCreatedAt(*t)
	}
	return biu
}

// SetDeletedAt sets the "deleted_at" field.
func (biu *BaseInfoUpdate) SetDeletedAt(t time.Time) *BaseInfoUpdate {
	biu.mutation.SetDeletedAt(t)
	return biu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableDeletedAt(t *time.Time) *BaseInfoUpdate {
	if t != nil {
		biu.SetDeletedAt(*t)
	}
	return biu
}

// SetUpdatedAt sets the "updated_at" field.
func (biu *BaseInfoUpdate) SetUpdatedAt(t time.Time) *BaseInfoUpdate {
	biu.mutation.SetUpdatedAt(t)
	return biu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableUpdatedAt(t *time.Time) *BaseInfoUpdate {
	if t != nil {
		biu.SetUpdatedAt(*t)
	}
	return biu
}

// SetBaseID sets the "base_id" field.
func (biu *BaseInfoUpdate) SetBaseID(s string) *BaseInfoUpdate {
	biu.mutation.SetBaseID(s)
	return biu
}

// SetNillableBaseID sets the "base_id" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableBaseID(s *string) *BaseInfoUpdate {
	if s != nil {
		biu.SetBaseID(*s)
	}
	return biu
}

// SetName sets the "name" field.
func (biu *BaseInfoUpdate) SetName(s string) *BaseInfoUpdate {
	biu.mutation.SetName(s)
	return biu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableName(s *string) *BaseInfoUpdate {
	if s != nil {
		biu.SetName(*s)
	}
	return biu
}

// SetLogo sets the "logo" field.
func (biu *BaseInfoUpdate) SetLogo(s string) *BaseInfoUpdate {
	biu.mutation.SetLogo(s)
	return biu
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableLogo(s *string) *BaseInfoUpdate {
	if s != nil {
		biu.SetLogo(*s)
	}
	return biu
}

// SetColor sets the "color" field.
func (biu *BaseInfoUpdate) SetColor(s string) *BaseInfoUpdate {
	biu.mutation.SetColor(s)
	return biu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (biu *BaseInfoUpdate) SetNillableColor(s *string) *BaseInfoUpdate {
	if s != nil {
		biu.SetColor(*s)
	}
	return biu
}

// Mutation returns the BaseInfoMutation object of the builder.
func (biu *BaseInfoUpdate) Mutation() *BaseInfoMutation {
	return biu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BaseInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BaseInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BaseInfoUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BaseInfoUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biu *BaseInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(baseinfo.Table, baseinfo.Columns, sqlgraph.NewFieldSpec(baseinfo.FieldID, field.TypeString))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.CreatedAt(); ok {
		_spec.SetField(baseinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.DeletedAt(); ok {
		_spec.SetField(baseinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.UpdatedAt(); ok {
		_spec.SetField(baseinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biu.mutation.BaseID(); ok {
		_spec.SetField(baseinfo.FieldBaseID, field.TypeString, value)
	}
	if value, ok := biu.mutation.Name(); ok {
		_spec.SetField(baseinfo.FieldName, field.TypeString, value)
	}
	if value, ok := biu.mutation.Logo(); ok {
		_spec.SetField(baseinfo.FieldLogo, field.TypeString, value)
	}
	if value, ok := biu.mutation.Color(); ok {
		_spec.SetField(baseinfo.FieldColor, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{baseinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BaseInfoUpdateOne is the builder for updating a single BaseInfo entity.
type BaseInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BaseInfoMutation
}

// SetCreatedAt sets the "created_at" field.
func (biuo *BaseInfoUpdateOne) SetCreatedAt(t time.Time) *BaseInfoUpdateOne {
	biuo.mutation.SetCreatedAt(t)
	return biuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableCreatedAt(t *time.Time) *BaseInfoUpdateOne {
	if t != nil {
		biuo.SetCreatedAt(*t)
	}
	return biuo
}

// SetDeletedAt sets the "deleted_at" field.
func (biuo *BaseInfoUpdateOne) SetDeletedAt(t time.Time) *BaseInfoUpdateOne {
	biuo.mutation.SetDeletedAt(t)
	return biuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableDeletedAt(t *time.Time) *BaseInfoUpdateOne {
	if t != nil {
		biuo.SetDeletedAt(*t)
	}
	return biuo
}

// SetUpdatedAt sets the "updated_at" field.
func (biuo *BaseInfoUpdateOne) SetUpdatedAt(t time.Time) *BaseInfoUpdateOne {
	biuo.mutation.SetUpdatedAt(t)
	return biuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableUpdatedAt(t *time.Time) *BaseInfoUpdateOne {
	if t != nil {
		biuo.SetUpdatedAt(*t)
	}
	return biuo
}

// SetBaseID sets the "base_id" field.
func (biuo *BaseInfoUpdateOne) SetBaseID(s string) *BaseInfoUpdateOne {
	biuo.mutation.SetBaseID(s)
	return biuo
}

// SetNillableBaseID sets the "base_id" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableBaseID(s *string) *BaseInfoUpdateOne {
	if s != nil {
		biuo.SetBaseID(*s)
	}
	return biuo
}

// SetName sets the "name" field.
func (biuo *BaseInfoUpdateOne) SetName(s string) *BaseInfoUpdateOne {
	biuo.mutation.SetName(s)
	return biuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableName(s *string) *BaseInfoUpdateOne {
	if s != nil {
		biuo.SetName(*s)
	}
	return biuo
}

// SetLogo sets the "logo" field.
func (biuo *BaseInfoUpdateOne) SetLogo(s string) *BaseInfoUpdateOne {
	biuo.mutation.SetLogo(s)
	return biuo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableLogo(s *string) *BaseInfoUpdateOne {
	if s != nil {
		biuo.SetLogo(*s)
	}
	return biuo
}

// SetColor sets the "color" field.
func (biuo *BaseInfoUpdateOne) SetColor(s string) *BaseInfoUpdateOne {
	biuo.mutation.SetColor(s)
	return biuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (biuo *BaseInfoUpdateOne) SetNillableColor(s *string) *BaseInfoUpdateOne {
	if s != nil {
		biuo.SetColor(*s)
	}
	return biuo
}

// Mutation returns the BaseInfoMutation object of the builder.
func (biuo *BaseInfoUpdateOne) Mutation() *BaseInfoMutation {
	return biuo.mutation
}

// Where appends a list predicates to the BaseInfoUpdate builder.
func (biuo *BaseInfoUpdateOne) Where(ps ...predicate.BaseInfo) *BaseInfoUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BaseInfoUpdateOne) Select(field string, fields ...string) *BaseInfoUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BaseInfo entity.
func (biuo *BaseInfoUpdateOne) Save(ctx context.Context) (*BaseInfo, error) {
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BaseInfoUpdateOne) SaveX(ctx context.Context) *BaseInfo {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BaseInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BaseInfoUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biuo *BaseInfoUpdateOne) sqlSave(ctx context.Context) (_node *BaseInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(baseinfo.Table, baseinfo.Columns, sqlgraph.NewFieldSpec(baseinfo.FieldID, field.TypeString))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "BaseInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, baseinfo.FieldID)
		for _, f := range fields {
			if !baseinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != baseinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.CreatedAt(); ok {
		_spec.SetField(baseinfo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.DeletedAt(); ok {
		_spec.SetField(baseinfo.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.UpdatedAt(); ok {
		_spec.SetField(baseinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.BaseID(); ok {
		_spec.SetField(baseinfo.FieldBaseID, field.TypeString, value)
	}
	if value, ok := biuo.mutation.Name(); ok {
		_spec.SetField(baseinfo.FieldName, field.TypeString, value)
	}
	if value, ok := biuo.mutation.Logo(); ok {
		_spec.SetField(baseinfo.FieldLogo, field.TypeString, value)
	}
	if value, ok := biuo.mutation.Color(); ok {
		_spec.SetField(baseinfo.FieldColor, field.TypeString, value)
	}
	_node = &BaseInfo{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{baseinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
