// Code generated by ent, DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"mai.today/core/entity/basenavstate"
)

// BaseNavState is the model entity for the BaseNavState schema.
type BaseNavState struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty" bson:"_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// BaseID holds the value of the "base_id" field.
	BaseID string `json:"base_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Index holds the value of the "index" field.
	Index        int `json:"index,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BaseNavState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case basenavstate.FieldIndex:
			values[i] = new(sql.NullInt64)
		case basenavstate.FieldID, basenavstate.FieldBaseID, basenavstate.FieldUserID:
			values[i] = new(sql.NullString)
		case basenavstate.FieldCreatedAt, basenavstate.FieldDeletedAt, basenavstate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BaseNavState fields.
func (bns *BaseNavState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basenavstate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bns.ID = value.String
			}
		case basenavstate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bns.CreatedAt = value.Time
			}
		case basenavstate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bns.DeletedAt = new(time.Time)
				*bns.DeletedAt = value.Time
			}
		case basenavstate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bns.UpdatedAt = value.Time
			}
		case basenavstate.FieldBaseID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_id", values[i])
			} else if value.Valid {
				bns.BaseID = value.String
			}
		case basenavstate.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				bns.UserID = value.String
			}
		case basenavstate.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				bns.Index = int(value.Int64)
			}
		default:
			bns.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BaseNavState.
// This includes values selected through modifiers, order, etc.
func (bns *BaseNavState) Value(name string) (ent.Value, error) {
	return bns.selectValues.Get(name)
}

// Update returns a builder for updating this BaseNavState.
// Note that you need to call BaseNavState.Unwrap() before calling this method if this BaseNavState
// was returned from a transaction, and the transaction was committed or rolled back.
func (bns *BaseNavState) Update() *BaseNavStateUpdateOne {
	return NewBaseNavStateClient(bns.config).UpdateOne(bns)
}

// Unwrap unwraps the BaseNavState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bns *BaseNavState) Unwrap() *BaseNavState {
	_tx, ok := bns.config.driver.(*txDriver)
	if !ok {
		panic("entity: BaseNavState is not a transactional entity")
	}
	bns.config.driver = _tx.drv
	return bns
}

// String implements the fmt.Stringer.
func (bns *BaseNavState) String() string {
	var builder strings.Builder
	builder.WriteString("BaseNavState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bns.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bns.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bns.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bns.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("base_id=")
	builder.WriteString(bns.BaseID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(bns.UserID)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", bns.Index))
	builder.WriteByte(')')
	return builder.String()
}

// BaseNavStates is a parsable slice of BaseNavState.
type BaseNavStates []*BaseNavState
